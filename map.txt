
build-atmega/test-02.ino.elf:     file format elf32-avr


Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__ctors_end>
       4:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
       8:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
       c:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      10:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      14:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      18:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      1c:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      20:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      24:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      28:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      2c:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      30:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      34:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      38:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      3c:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      40:	0c 94 e6 04 	jmp	0x9cc	; 0x9cc <__vector_16>
      44:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      48:	0c 94 b4 04 	jmp	0x968	; 0x968 <__vector_18>
      4c:	0c 94 8e 04 	jmp	0x91c	; 0x91c <__vector_19>
      50:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      54:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      58:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      5c:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      60:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      64:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>

00000068 <__trampolines_end>:
      68:	4e 41       	sbci	r20, 0x1E	; 30
      6a:	4e 49       	Address 0x0000006a is out of bounds.
.word	0xffff	; ????

0000006b <pstr_inity>:
      6b:	49 4e 49 54 59                                      INITY

00000070 <pstr_inf>:
      70:	49 4e 46                                            INF

00000073 <pwr_m10>:
      73:	cd cc cc 3d 0a d7 23 3c 17 b7 d1 38 77 cc 2b 32     ...=..#<...8w.+2
      83:	95 95 e6 24 1f b1 4f 0a                             ...$..O.

0000008b <pwr_p10>:
      8b:	00 00 20 41 00 00 c8 42 00 40 1c 46 20 bc be 4c     .. A...B.@.F ..L
      9b:	ca 1b 0e 5a ae c5 9d 74                             ...Z...t

000000a3 <port_to_mode_PGM>:
      a3:	00 00 00 00 24 00 27 00 2a 00                       ....$.'.*.

000000ad <port_to_output_PGM>:
      ad:	00 00 00 00 25 00 28 00 2b 00                       ....%.(.+.

000000b7 <digital_pin_to_port_PGM>:
      b7:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 03 03     ................
      c7:	03 03 03 03                                         ....

000000cb <digital_pin_to_bit_mask_PGM>:
      cb:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 01 02     ..... @...... ..
      db:	04 08 10 20                                         ... 

000000df <digital_pin_to_timer_PGM>:
      df:	00 00 00 08 00 02 01 00 00 03 04 07 00 00 00 00     ................
      ef:	00 00 00 00                                         ....

000000f3 <_ZZN10__autoCallC4EvE1e_7>:
      f3:	3f 02 43 02 47 02                                   ?.C.G.

000000f9 <_ZZN10__autoCallC4EvE1e>:
	...

000000fa <__ctors_start>:
      fa:	44 05       	cpc	r20, r4

000000fc <__ctors_end>:
      fc:	11 24       	eor	r1, r1
      fe:	1f be       	out	0x3f, r1	; 63
     100:	cf ef       	ldi	r28, 0xFF	; 255
     102:	d4 e0       	ldi	r29, 0x04	; 4
     104:	de bf       	out	0x3e, r29	; 62
     106:	cd bf       	out	0x3d, r28	; 61

00000108 <__do_clear_bss>:
     108:	24 e0       	ldi	r18, 0x04	; 4
     10a:	ac e4       	ldi	r26, 0x4C	; 76
     10c:	b2 e0       	ldi	r27, 0x02	; 2
     10e:	01 c0       	rjmp	.+2      	; 0x112 <.do_clear_bss_start>

00000110 <.do_clear_bss_loop>:
     110:	1d 92       	st	X+, r1

00000112 <.do_clear_bss_start>:
     112:	af 32       	cpi	r26, 0x2F	; 47
     114:	b2 07       	cpc	r27, r18
     116:	e1 f7       	brne	.-8      	; 0x110 <.do_clear_bss_loop>

00000118 <__do_copy_data>:
     118:	12 e0       	ldi	r17, 0x02	; 2
     11a:	a0 e0       	ldi	r26, 0x00	; 0
     11c:	b1 e0       	ldi	r27, 0x01	; 1
     11e:	ea eb       	ldi	r30, 0xBA	; 186
     120:	fa e1       	ldi	r31, 0x1A	; 26
     122:	02 c0       	rjmp	.+4      	; 0x128 <__do_copy_data+0x10>
     124:	05 90       	lpm	r0, Z+
     126:	0d 92       	st	X+, r0
     128:	ac 34       	cpi	r26, 0x4C	; 76
     12a:	b1 07       	cpc	r27, r17
     12c:	d9 f7       	brne	.-10     	; 0x124 <__do_copy_data+0xc>

0000012e <__do_global_ctors>:
     12e:	10 e0       	ldi	r17, 0x00	; 0
     130:	ce e7       	ldi	r28, 0x7E	; 126
     132:	d0 e0       	ldi	r29, 0x00	; 0
     134:	04 c0       	rjmp	.+8      	; 0x13e <__do_global_ctors+0x10>
     136:	21 97       	sbiw	r28, 0x01	; 1
     138:	fe 01       	movw	r30, r28
     13a:	0e 94 55 0d 	call	0x1aaa	; 0x1aaa <__tablejump2__>
     13e:	cd 37       	cpi	r28, 0x7D	; 125
     140:	d1 07       	cpc	r29, r17
     142:	c9 f7       	brne	.-14     	; 0x136 <__do_global_ctors+0x8>
     144:	0e 94 93 06 	call	0xd26	; 0xd26 <main>
     148:	0c 94 5b 0d 	jmp	0x1ab6	; 0x1ab6 <_exit>

0000014c <__bad_interrupt>:
     14c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000150 <digitalWrite.constprop.12>:
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
	uint8_t timer = digitalPinToTimer(pin);
     150:	ec ee       	ldi	r30, 0xEC	; 236
     152:	f0 e0       	ldi	r31, 0x00	; 0
     154:	24 91       	lpm	r18, Z
	uint8_t bit = digitalPinToBitMask(pin);
     156:	e8 ed       	ldi	r30, 0xD8	; 216
     158:	f0 e0       	ldi	r31, 0x00	; 0
     15a:	94 91       	lpm	r25, Z
	uint8_t port = digitalPinToPort(pin);
     15c:	e4 ec       	ldi	r30, 0xC4	; 196
     15e:	f0 e0       	ldi	r31, 0x00	; 0
     160:	e4 91       	lpm	r30, Z
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
     162:	ee 23       	and	r30, r30
     164:	c9 f0       	breq	.+50     	; 0x198 <digitalWrite.constprop.12+0x48>

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
     166:	22 23       	and	r18, r18
     168:	39 f0       	breq	.+14     	; 0x178 <digitalWrite.constprop.12+0x28>
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
     16a:	23 30       	cpi	r18, 0x03	; 3
     16c:	01 f1       	breq	.+64     	; 0x1ae <digitalWrite.constprop.12+0x5e>
     16e:	a8 f4       	brcc	.+42     	; 0x19a <digitalWrite.constprop.12+0x4a>
     170:	21 30       	cpi	r18, 0x01	; 1
     172:	19 f1       	breq	.+70     	; 0x1ba <digitalWrite.constprop.12+0x6a>
     174:	22 30       	cpi	r18, 0x02	; 2
     176:	29 f1       	breq	.+74     	; 0x1c2 <digitalWrite.constprop.12+0x72>

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);

	out = portOutputRegister(port);
     178:	f0 e0       	ldi	r31, 0x00	; 0
     17a:	ee 0f       	add	r30, r30
     17c:	ff 1f       	adc	r31, r31
     17e:	e3 55       	subi	r30, 0x53	; 83
     180:	ff 4f       	sbci	r31, 0xFF	; 255
     182:	a5 91       	lpm	r26, Z+
     184:	b4 91       	lpm	r27, Z

	uint8_t oldSREG = SREG;
     186:	2f b7       	in	r18, 0x3f	; 63
	cli();
     188:	f8 94       	cli

	if (val == LOW) {
		*out &= ~bit;
     18a:	ec 91       	ld	r30, X
	out = portOutputRegister(port);

	uint8_t oldSREG = SREG;
	cli();

	if (val == LOW) {
     18c:	81 11       	cpse	r24, r1
     18e:	26 c0       	rjmp	.+76     	; 0x1dc <digitalWrite.constprop.12+0x8c>
		*out &= ~bit;
     190:	90 95       	com	r25
     192:	9e 23       	and	r25, r30
	} else {
		*out |= bit;
     194:	9c 93       	st	X, r25
	}

	SREG = oldSREG;
     196:	2f bf       	out	0x3f, r18	; 63
}
     198:	08 95       	ret
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
     19a:	27 30       	cpi	r18, 0x07	; 7
     19c:	a9 f0       	breq	.+42     	; 0x1c8 <digitalWrite.constprop.12+0x78>
     19e:	28 30       	cpi	r18, 0x08	; 8
     1a0:	c9 f0       	breq	.+50     	; 0x1d4 <digitalWrite.constprop.12+0x84>
     1a2:	24 30       	cpi	r18, 0x04	; 4
     1a4:	49 f7       	brne	.-46     	; 0x178 <digitalWrite.constprop.12+0x28>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
     1a6:	20 91 80 00 	lds	r18, 0x0080	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
     1aa:	2f 7d       	andi	r18, 0xDF	; 223
     1ac:	03 c0       	rjmp	.+6      	; 0x1b4 <digitalWrite.constprop.12+0x64>
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
     1ae:	20 91 80 00 	lds	r18, 0x0080	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
     1b2:	2f 77       	andi	r18, 0x7F	; 127
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
     1b4:	20 93 80 00 	sts	0x0080, r18	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
     1b8:	df cf       	rjmp	.-66     	; 0x178 <digitalWrite.constprop.12+0x28>
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
     1ba:	24 b5       	in	r18, 0x24	; 36
     1bc:	2f 77       	andi	r18, 0x7F	; 127
		#endif
		
		#if defined(TCCR0A) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
     1be:	24 bd       	out	0x24, r18	; 36
     1c0:	db cf       	rjmp	.-74     	; 0x178 <digitalWrite.constprop.12+0x28>
     1c2:	24 b5       	in	r18, 0x24	; 36
     1c4:	2f 7d       	andi	r18, 0xDF	; 223
     1c6:	fb cf       	rjmp	.-10     	; 0x1be <digitalWrite.constprop.12+0x6e>
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
     1c8:	20 91 b0 00 	lds	r18, 0x00B0	; 0x8000b0 <__DATA_REGION_ORIGIN__+0x50>
     1cc:	2f 77       	andi	r18, 0x7F	; 127
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
     1ce:	20 93 b0 00 	sts	0x00B0, r18	; 0x8000b0 <__DATA_REGION_ORIGIN__+0x50>
     1d2:	d2 cf       	rjmp	.-92     	; 0x178 <digitalWrite.constprop.12+0x28>
     1d4:	20 91 b0 00 	lds	r18, 0x00B0	; 0x8000b0 <__DATA_REGION_ORIGIN__+0x50>
     1d8:	2f 7d       	andi	r18, 0xDF	; 223
     1da:	f9 cf       	rjmp	.-14     	; 0x1ce <digitalWrite.constprop.12+0x7e>
	cli();

	if (val == LOW) {
		*out &= ~bit;
	} else {
		*out |= bit;
     1dc:	9e 2b       	or	r25, r30
     1de:	da cf       	rjmp	.-76     	; 0x194 <digitalWrite.constprop.12+0x44>

000001e0 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
     1e0:	af 92       	push	r10
     1e2:	bf 92       	push	r11
     1e4:	cf 92       	push	r12
     1e6:	df 92       	push	r13
     1e8:	ef 92       	push	r14
     1ea:	ff 92       	push	r15
     1ec:	0f 93       	push	r16
     1ee:	1f 93       	push	r17
     1f0:	cf 93       	push	r28
     1f2:	df 93       	push	r29
     1f4:	6c 01       	movw	r12, r24
     1f6:	7b 01       	movw	r14, r22
     1f8:	8b 01       	movw	r16, r22
     1fa:	04 0f       	add	r16, r20
     1fc:	15 1f       	adc	r17, r21
     1fe:	eb 01       	movw	r28, r22
     200:	5e 01       	movw	r10, r28
     202:	ae 18       	sub	r10, r14
     204:	bf 08       	sbc	r11, r15
  size_t n = 0;
  while (size--) {
     206:	c0 17       	cp	r28, r16
     208:	d1 07       	cpc	r29, r17
     20a:	59 f0       	breq	.+22     	; 0x222 <_ZN5Print5writeEPKhj+0x42>
    if (write(*buffer++)) n++;
     20c:	69 91       	ld	r22, Y+
     20e:	d6 01       	movw	r26, r12
     210:	ed 91       	ld	r30, X+
     212:	fc 91       	ld	r31, X
     214:	01 90       	ld	r0, Z+
     216:	f0 81       	ld	r31, Z
     218:	e0 2d       	mov	r30, r0
     21a:	c6 01       	movw	r24, r12
     21c:	09 95       	icall
     21e:	89 2b       	or	r24, r25
     220:	79 f7       	brne	.-34     	; 0x200 <_ZN5Print5writeEPKhj+0x20>
    else break;
  }
  return n;
}
     222:	c5 01       	movw	r24, r10
     224:	df 91       	pop	r29
     226:	cf 91       	pop	r28
     228:	1f 91       	pop	r17
     22a:	0f 91       	pop	r16
     22c:	ff 90       	pop	r15
     22e:	ef 90       	pop	r14
     230:	df 90       	pop	r13
     232:	cf 90       	pop	r12
     234:	bf 90       	pop	r11
     236:	af 90       	pop	r10
     238:	08 95       	ret

0000023a <_ZN14HardwareSerial17availableForWriteEv>:
{
  tx_buffer_index_t head;
  tx_buffer_index_t tail;

  TX_BUFFER_ATOMIC {
    head = _tx_buffer_head;
     23a:	fc 01       	movw	r30, r24
     23c:	53 8d       	ldd	r21, Z+27	; 0x1b
    tail = _tx_buffer_tail;
     23e:	44 8d       	ldd	r20, Z+28	; 0x1c
     240:	25 2f       	mov	r18, r21
     242:	30 e0       	ldi	r19, 0x00	; 0
     244:	84 2f       	mov	r24, r20
     246:	90 e0       	ldi	r25, 0x00	; 0
  }
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
     248:	82 1b       	sub	r24, r18
     24a:	93 0b       	sbc	r25, r19
     24c:	54 17       	cp	r21, r20
     24e:	10 f0       	brcs	.+4      	; 0x254 <_ZN14HardwareSerial17availableForWriteEv+0x1a>
     250:	cf 96       	adiw	r24, 0x3f	; 63
     252:	08 95       	ret
  return tail - head - 1;
     254:	01 97       	sbiw	r24, 0x01	; 1
}
     256:	08 95       	ret

00000258 <_ZN14HardwareSerial4readEv>:
    return _rx_buffer[_rx_buffer_tail];
  }
}

int HardwareSerial::read(void)
{
     258:	fc 01       	movw	r30, r24
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
     25a:	91 8d       	ldd	r25, Z+25	; 0x19
     25c:	82 8d       	ldd	r24, Z+26	; 0x1a
     25e:	98 17       	cp	r25, r24
     260:	61 f0       	breq	.+24     	; 0x27a <_ZN14HardwareSerial4readEv+0x22>
    return -1;
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
     262:	a2 8d       	ldd	r26, Z+26	; 0x1a
     264:	ae 0f       	add	r26, r30
     266:	bf 2f       	mov	r27, r31
     268:	b1 1d       	adc	r27, r1
     26a:	5d 96       	adiw	r26, 0x1d	; 29
     26c:	8c 91       	ld	r24, X
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
     26e:	92 8d       	ldd	r25, Z+26	; 0x1a
     270:	9f 5f       	subi	r25, 0xFF	; 255
     272:	9f 73       	andi	r25, 0x3F	; 63
     274:	92 8f       	std	Z+26, r25	; 0x1a
    return c;
     276:	90 e0       	ldi	r25, 0x00	; 0
     278:	08 95       	ret

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
     27a:	8f ef       	ldi	r24, 0xFF	; 255
     27c:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    return c;
  }
}
     27e:	08 95       	ret

00000280 <_ZN14HardwareSerial4peekEv>:
{
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
}

int HardwareSerial::peek(void)
{
     280:	fc 01       	movw	r30, r24
  if (_rx_buffer_head == _rx_buffer_tail) {
     282:	91 8d       	ldd	r25, Z+25	; 0x19
     284:	82 8d       	ldd	r24, Z+26	; 0x1a
     286:	98 17       	cp	r25, r24
     288:	31 f0       	breq	.+12     	; 0x296 <_ZN14HardwareSerial4peekEv+0x16>
    return -1;
  } else {
    return _rx_buffer[_rx_buffer_tail];
     28a:	82 8d       	ldd	r24, Z+26	; 0x1a
     28c:	e8 0f       	add	r30, r24
     28e:	f1 1d       	adc	r31, r1
     290:	85 8d       	ldd	r24, Z+29	; 0x1d
     292:	90 e0       	ldi	r25, 0x00	; 0
     294:	08 95       	ret
}

int HardwareSerial::peek(void)
{
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
     296:	8f ef       	ldi	r24, 0xFF	; 255
     298:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    return _rx_buffer[_rx_buffer_tail];
  }
}
     29a:	08 95       	ret

0000029c <_ZN14HardwareSerial9availableEv>:
  // clear any received data
  _rx_buffer_head = _rx_buffer_tail;
}

int HardwareSerial::available(void)
{
     29c:	fc 01       	movw	r30, r24
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
     29e:	91 8d       	ldd	r25, Z+25	; 0x19
     2a0:	22 8d       	ldd	r18, Z+26	; 0x1a
     2a2:	89 2f       	mov	r24, r25
     2a4:	90 e0       	ldi	r25, 0x00	; 0
     2a6:	80 5c       	subi	r24, 0xC0	; 192
     2a8:	9f 4f       	sbci	r25, 0xFF	; 255
     2aa:	82 1b       	sub	r24, r18
     2ac:	91 09       	sbc	r25, r1
}
     2ae:	8f 73       	andi	r24, 0x3F	; 63
     2b0:	99 27       	eor	r25, r25
     2b2:	08 95       	ret

000002b4 <_Z17Serial0_availablev>:
#endif

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial0_available() {
  return Serial.available();
     2b4:	80 e0       	ldi	r24, 0x00	; 0
     2b6:	93 e0       	ldi	r25, 0x03	; 3
     2b8:	0e 94 4e 01 	call	0x29c	; 0x29c <_ZN14HardwareSerial9availableEv>
     2bc:	21 e0       	ldi	r18, 0x01	; 1
     2be:	89 2b       	or	r24, r25
     2c0:	09 f4       	brne	.+2      	; 0x2c4 <_Z17Serial0_availablev+0x10>
     2c2:	20 e0       	ldi	r18, 0x00	; 0
}
     2c4:	82 2f       	mov	r24, r18
     2c6:	08 95       	ret

000002c8 <_Z14serialEventRunv>:
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
     2c8:	80 e0       	ldi	r24, 0x00	; 0
     2ca:	90 e0       	ldi	r25, 0x00	; 0
     2cc:	89 2b       	or	r24, r25
     2ce:	29 f0       	breq	.+10     	; 0x2da <_Z14serialEventRunv+0x12>
     2d0:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <_Z17Serial0_availablev>
     2d4:	81 11       	cpse	r24, r1
     2d6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>
  if (Serial2_available && serialEvent2 && Serial2_available()) serialEvent2();
#endif
#if defined(HAVE_HWSERIAL3)
  if (Serial3_available && serialEvent3 && Serial3_available()) serialEvent3();
#endif
}
     2da:	08 95       	ret

000002dc <_ZN14HardwareSerial17_tx_udr_empty_irqEv>:
#endif

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
     2dc:	fc 01       	movw	r30, r24
  // If interrupts are enabled, there must be more data in the output
  // buffer. Send the next byte
  unsigned char c = _tx_buffer[_tx_buffer_tail];
     2de:	a4 8d       	ldd	r26, Z+28	; 0x1c
     2e0:	a8 0f       	add	r26, r24
     2e2:	b9 2f       	mov	r27, r25
     2e4:	b1 1d       	adc	r27, r1
     2e6:	a3 5a       	subi	r26, 0xA3	; 163
     2e8:	bf 4f       	sbci	r27, 0xFF	; 255
     2ea:	2c 91       	ld	r18, X
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
     2ec:	84 8d       	ldd	r24, Z+28	; 0x1c
     2ee:	90 e0       	ldi	r25, 0x00	; 0
     2f0:	01 96       	adiw	r24, 0x01	; 1
     2f2:	8f 73       	andi	r24, 0x3F	; 63
     2f4:	99 27       	eor	r25, r25
     2f6:	84 8f       	std	Z+28, r24	; 0x1c

  *_udr = c;
     2f8:	a6 89       	ldd	r26, Z+22	; 0x16
     2fa:	b7 89       	ldd	r27, Z+23	; 0x17
     2fc:	2c 93       	st	X, r18
  // location". This makes sure flush() won't return until the bytes
  // actually got written. Other r/w bits are preserved, and zeroes
  // written to the rest.

#ifdef MPCM0
  *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << MPCM0))) | (1 << TXC0);
     2fe:	a0 89       	ldd	r26, Z+16	; 0x10
     300:	b1 89       	ldd	r27, Z+17	; 0x11
     302:	8c 91       	ld	r24, X
     304:	83 70       	andi	r24, 0x03	; 3
     306:	80 64       	ori	r24, 0x40	; 64
     308:	8c 93       	st	X, r24
#else
  *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << TXC0)));
#endif

  if (_tx_buffer_head == _tx_buffer_tail) {
     30a:	93 8d       	ldd	r25, Z+27	; 0x1b
     30c:	84 8d       	ldd	r24, Z+28	; 0x1c
     30e:	98 13       	cpse	r25, r24
     310:	06 c0       	rjmp	.+12     	; 0x31e <_ZN14HardwareSerial17_tx_udr_empty_irqEv+0x42>
    // Buffer empty, so disable interrupts
    cbi(*_ucsrb, UDRIE0);
     312:	02 88       	ldd	r0, Z+18	; 0x12
     314:	f3 89       	ldd	r31, Z+19	; 0x13
     316:	e0 2d       	mov	r30, r0
     318:	80 81       	ld	r24, Z
     31a:	8f 7d       	andi	r24, 0xDF	; 223
     31c:	80 83       	st	Z, r24
  }
}
     31e:	08 95       	ret

00000320 <_ZN14HardwareSerial5writeEh>:
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}

size_t HardwareSerial::write(uint8_t c)
{
     320:	ef 92       	push	r14
     322:	ff 92       	push	r15
     324:	0f 93       	push	r16
     326:	1f 93       	push	r17
     328:	cf 93       	push	r28
     32a:	df 93       	push	r29
     32c:	ec 01       	movw	r28, r24
  _written = true;
     32e:	81 e0       	ldi	r24, 0x01	; 1
     330:	88 8f       	std	Y+24, r24	; 0x18
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
     332:	9b 8d       	ldd	r25, Y+27	; 0x1b
     334:	8c 8d       	ldd	r24, Y+28	; 0x1c
     336:	98 13       	cpse	r25, r24
     338:	1a c0       	rjmp	.+52     	; 0x36e <_ZN14HardwareSerial5writeEh+0x4e>
     33a:	e8 89       	ldd	r30, Y+16	; 0x10
     33c:	f9 89       	ldd	r31, Y+17	; 0x11
     33e:	80 81       	ld	r24, Z
     340:	85 ff       	sbrs	r24, 5
     342:	15 c0       	rjmp	.+42     	; 0x36e <_ZN14HardwareSerial5writeEh+0x4e>
    // So writing UDR must happen first.
    // Writing UDR and clearing TC must be done atomically, otherwise
    // interrupts might delay the TXC clear so the byte written to UDR
    // is transmitted (setting TXC) before clearing TXC. Then TXC will
    // be cleared when no bytes are left, causing flush() to hang
    ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
     344:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     346:	f8 94       	cli
      *_udr = c;
     348:	ee 89       	ldd	r30, Y+22	; 0x16
     34a:	ff 89       	ldd	r31, Y+23	; 0x17
     34c:	60 83       	st	Z, r22
#ifdef MPCM0
      *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << MPCM0))) | (1 << TXC0);
     34e:	e8 89       	ldd	r30, Y+16	; 0x10
     350:	f9 89       	ldd	r31, Y+17	; 0x11
     352:	80 81       	ld	r24, Z
     354:	83 70       	andi	r24, 0x03	; 3
     356:	80 64       	ori	r24, 0x40	; 64
  // make atomic to prevent execution of ISR between setting the
  // head pointer and setting the interrupt flag resulting in buffer
  // retransmission
  ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
    _tx_buffer_head = i;
    sbi(*_ucsrb, UDRIE0);
     358:	80 83       	st	Z, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     35a:	9f bf       	out	0x3f, r25	; 63
  }
  
  return 1;
}
     35c:	81 e0       	ldi	r24, 0x01	; 1
     35e:	90 e0       	ldi	r25, 0x00	; 0
     360:	df 91       	pop	r29
     362:	cf 91       	pop	r28
     364:	1f 91       	pop	r17
     366:	0f 91       	pop	r16
     368:	ff 90       	pop	r15
     36a:	ef 90       	pop	r14
     36c:	08 95       	ret
     36e:	f6 2e       	mov	r15, r22
      *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << TXC0)));
#endif
    }
    return 1;
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
     370:	0b 8d       	ldd	r16, Y+27	; 0x1b
     372:	10 e0       	ldi	r17, 0x00	; 0
     374:	0f 5f       	subi	r16, 0xFF	; 255
     376:	1f 4f       	sbci	r17, 0xFF	; 255
     378:	0f 73       	andi	r16, 0x3F	; 63
     37a:	11 27       	eor	r17, r17
     37c:	e0 2e       	mov	r14, r16
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
     37e:	8c 8d       	ldd	r24, Y+28	; 0x1c
     380:	8e 11       	cpse	r24, r14
     382:	0c c0       	rjmp	.+24     	; 0x39c <_ZN14HardwareSerial5writeEh+0x7c>
    if (bit_is_clear(SREG, SREG_I)) {
     384:	0f b6       	in	r0, 0x3f	; 63
     386:	07 fc       	sbrc	r0, 7
     388:	fa cf       	rjmp	.-12     	; 0x37e <_ZN14HardwareSerial5writeEh+0x5e>
      // Interrupts are disabled, so we'll have to poll the data
      // register empty flag ourselves. If it is set, pretend an
      // interrupt has happened and call the handler to free up
      // space for us.
      if(bit_is_set(*_ucsra, UDRE0))
     38a:	e8 89       	ldd	r30, Y+16	; 0x10
     38c:	f9 89       	ldd	r31, Y+17	; 0x11
     38e:	80 81       	ld	r24, Z
     390:	85 ff       	sbrs	r24, 5
     392:	f5 cf       	rjmp	.-22     	; 0x37e <_ZN14HardwareSerial5writeEh+0x5e>
	_tx_udr_empty_irq();
     394:	ce 01       	movw	r24, r28
     396:	0e 94 6e 01 	call	0x2dc	; 0x2dc <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
     39a:	f1 cf       	rjmp	.-30     	; 0x37e <_ZN14HardwareSerial5writeEh+0x5e>
    } else {
      // nop, the interrupt handler will free up space for us
    }
  }

  _tx_buffer[_tx_buffer_head] = c;
     39c:	eb 8d       	ldd	r30, Y+27	; 0x1b
     39e:	ec 0f       	add	r30, r28
     3a0:	fd 2f       	mov	r31, r29
     3a2:	f1 1d       	adc	r31, r1
     3a4:	e3 5a       	subi	r30, 0xA3	; 163
     3a6:	ff 4f       	sbci	r31, 0xFF	; 255
     3a8:	f0 82       	st	Z, r15

  // make atomic to prevent execution of ISR between setting the
  // head pointer and setting the interrupt flag resulting in buffer
  // retransmission
  ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
     3aa:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     3ac:	f8 94       	cli
    _tx_buffer_head = i;
     3ae:	0b 8f       	std	Y+27, r16	; 0x1b
    sbi(*_ucsrb, UDRIE0);
     3b0:	ea 89       	ldd	r30, Y+18	; 0x12
     3b2:	fb 89       	ldd	r31, Y+19	; 0x13
     3b4:	80 81       	ld	r24, Z
     3b6:	80 62       	ori	r24, 0x20	; 32
     3b8:	cf cf       	rjmp	.-98     	; 0x358 <_ZN14HardwareSerial5writeEh+0x38>

000003ba <_ZN14HardwareSerial5flushEv>:
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
  return tail - head - 1;
}

void HardwareSerial::flush()
{
     3ba:	cf 93       	push	r28
     3bc:	df 93       	push	r29
     3be:	ec 01       	movw	r28, r24
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
     3c0:	88 8d       	ldd	r24, Y+24	; 0x18
     3c2:	88 23       	and	r24, r24
     3c4:	b9 f0       	breq	.+46     	; 0x3f4 <_ZN14HardwareSerial5flushEv+0x3a>
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
     3c6:	aa 89       	ldd	r26, Y+18	; 0x12
     3c8:	bb 89       	ldd	r27, Y+19	; 0x13
     3ca:	e8 89       	ldd	r30, Y+16	; 0x10
     3cc:	f9 89       	ldd	r31, Y+17	; 0x11
     3ce:	8c 91       	ld	r24, X
     3d0:	85 fd       	sbrc	r24, 5
     3d2:	03 c0       	rjmp	.+6      	; 0x3da <_ZN14HardwareSerial5flushEv+0x20>
     3d4:	80 81       	ld	r24, Z
     3d6:	86 fd       	sbrc	r24, 6
     3d8:	0d c0       	rjmp	.+26     	; 0x3f4 <_ZN14HardwareSerial5flushEv+0x3a>
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
     3da:	0f b6       	in	r0, 0x3f	; 63
     3dc:	07 fc       	sbrc	r0, 7
     3de:	f7 cf       	rjmp	.-18     	; 0x3ce <_ZN14HardwareSerial5flushEv+0x14>
     3e0:	8c 91       	ld	r24, X
     3e2:	85 ff       	sbrs	r24, 5
     3e4:	f2 cf       	rjmp	.-28     	; 0x3ca <_ZN14HardwareSerial5flushEv+0x10>
	// Interrupts are globally disabled, but the DR empty
	// interrupt should be enabled, so poll the DR empty flag to
	// prevent deadlock
	if (bit_is_set(*_ucsra, UDRE0))
     3e6:	80 81       	ld	r24, Z
     3e8:	85 ff       	sbrs	r24, 5
     3ea:	ed cf       	rjmp	.-38     	; 0x3c6 <_ZN14HardwareSerial5flushEv+0xc>
	  _tx_udr_empty_irq();
     3ec:	ce 01       	movw	r24, r28
     3ee:	0e 94 6e 01 	call	0x2dc	; 0x2dc <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
     3f2:	e9 cf       	rjmp	.-46     	; 0x3c6 <_ZN14HardwareSerial5flushEv+0xc>
  }
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}
     3f4:	df 91       	pop	r29
     3f6:	cf 91       	pop	r28
     3f8:	08 95       	ret

000003fa <_Z13isValidNumberPKcb>:
	bool dot = false;
	char ch;
	const char* p = v;

	// allow negative values
	if( *p=='-' ) {
     3fa:	fc 01       	movw	r30, r24
     3fc:	20 81       	ld	r18, Z
     3fe:	2d 32       	cpi	r18, 0x2D	; 45
     400:	a9 f4       	brne	.+42     	; 0x42c <__LOCK_REGION_LENGTH__+0x2c>
		p++;
     402:	9c 01       	movw	r18, r24
     404:	2f 5f       	subi	r18, 0xFF	; 255
     406:	3f 4f       	sbci	r19, 0xFF	; 255

bool isValidNumber( cstr v, bool flt ) {
	
	bool dot = false;
	char ch;
	const char* p = v;
     408:	40 e0       	ldi	r20, 0x00	; 0
	if( *p=='-' ) {
		p++;
	}

	// scan chars
	while( (ch=*p)!=0 ) {
     40a:	f9 01       	movw	r30, r18
     40c:	51 91       	ld	r21, Z+
     40e:	55 23       	and	r21, r21
     410:	79 f0       	breq	.+30     	; 0x430 <__LOCK_REGION_LENGTH__+0x30>
	
		if( ch<'0' || ch>'9' ) {
     412:	20 ed       	ldi	r18, 0xD0	; 208
     414:	25 0f       	add	r18, r21
     416:	2a 30       	cpi	r18, 0x0A	; 10
     418:	38 f0       	brcs	.+14     	; 0x428 <__LOCK_REGION_LENGTH__+0x28>

			// not a number
			if( !flt || ch!='.' || dot ) {
     41a:	66 23       	and	r22, r22
     41c:	81 f0       	breq	.+32     	; 0x43e <__LOCK_REGION_LENGTH__+0x3e>
     41e:	5e 32       	cpi	r21, 0x2E	; 46
     420:	81 f4       	brne	.+32     	; 0x442 <__LOCK_REGION_LENGTH__+0x42>
     422:	41 11       	cpse	r20, r1
     424:	0e c0       	rjmp	.+28     	; 0x442 <__LOCK_REGION_LENGTH__+0x42>
				return false;
			}

			// but '.' and we allow floats
			dot = true;
     426:	46 2f       	mov	r20, r22

bool isValidNumber( cstr v, bool flt ) {
	
	bool dot = false;
	char ch;
	const char* p = v;
     428:	9f 01       	movw	r18, r30
     42a:	ef cf       	rjmp	.-34     	; 0x40a <__LOCK_REGION_LENGTH__+0xa>
     42c:	9c 01       	movw	r18, r24
     42e:	ec cf       	rjmp	.-40     	; 0x408 <__LOCK_REGION_LENGTH__+0x8>

		p++;
	}

	// do not accept "." (len=1 && seen a dot)
	if( (p-v)==1 && dot ) {
     430:	28 1b       	sub	r18, r24
     432:	39 0b       	sbc	r19, r25
     434:	61 e0       	ldi	r22, 0x01	; 1
     436:	21 30       	cpi	r18, 0x01	; 1
     438:	31 05       	cpc	r19, r1
     43a:	09 f4       	brne	.+2      	; 0x43e <__LOCK_REGION_LENGTH__+0x3e>
     43c:	64 27       	eor	r22, r20
		return false;
	}

	return true;
}
     43e:	86 2f       	mov	r24, r22
     440:	08 95       	ret
	
		if( ch<'0' || ch>'9' ) {

			// not a number
			if( !flt || ch!='.' || dot ) {
				return false;
     442:	60 e0       	ldi	r22, 0x00	; 0
     444:	fc cf       	rjmp	.-8      	; 0x43e <__LOCK_REGION_LENGTH__+0x3e>

00000446 <_i_to_str>:
/**
 * int -> string conversion
 * the buffer must be big enough to contains the number
 */

char* _i_to_str( int n, char* dest ) {
     446:	ef 92       	push	r14
     448:	ff 92       	push	r15
     44a:	0f 93       	push	r16
     44c:	1f 93       	push	r17
     44e:	cf 93       	push	r28
     450:	df 93       	push	r29
     452:	cd b7       	in	r28, 0x3d	; 61
     454:	de b7       	in	r29, 0x3e	; 62
     456:	a2 97       	sbiw	r28, 0x22	; 34
     458:	0f b6       	in	r0, 0x3f	; 63
     45a:	f8 94       	cli
     45c:	de bf       	out	0x3e, r29	; 62
     45e:	0f be       	out	0x3f, r0	; 63
     460:	cd bf       	out	0x3d, r28	; 61
     462:	fb 01       	movw	r30, r22

	if( n==0 ) {
     464:	00 97       	sbiw	r24, 0x00	; 0
     466:	91 f4       	brne	.+36     	; 0x48c <_i_to_str+0x46>
		*dest++ = '0';
     468:	80 e3       	ldi	r24, 0x30	; 48
     46a:	80 83       	st	Z, r24
		*dest = 0;
     46c:	11 82       	std	Z+1, r1	; 0x01
		return dest;
     46e:	31 96       	adiw	r30, 0x01	; 1
		} while( p!=temp );
	}

	*dest = 0;
	return dest;
}
     470:	cf 01       	movw	r24, r30
     472:	a2 96       	adiw	r28, 0x22	; 34
     474:	0f b6       	in	r0, 0x3f	; 63
     476:	f8 94       	cli
     478:	de bf       	out	0x3e, r29	; 62
     47a:	0f be       	out	0x3f, r0	; 63
     47c:	cd bf       	out	0x3d, r28	; 61
     47e:	df 91       	pop	r29
     480:	cf 91       	pop	r28
     482:	1f 91       	pop	r17
     484:	0f 91       	pop	r16
     486:	ff 90       	pop	r15
     488:	ef 90       	pop	r14
     48a:	08 95       	ret
	}

	char temp[32+1+1];	// +1 for 0 zero term, +1 for neg if any
	char* p = temp;
	
	if( n<0 ) {
     48c:	97 ff       	sbrs	r25, 7
     48e:	03 c0       	rjmp	.+6      	; 0x496 <_i_to_str+0x50>
		*dest++ = '-';
     490:	2d e2       	ldi	r18, 0x2D	; 45
     492:	20 83       	st	Z, r18
     494:	31 96       	adiw	r30, 0x01	; 1
     496:	8e 01       	movw	r16, r28
     498:	0f 5f       	subi	r16, 0xFF	; 255
     49a:	1f 4f       	sbci	r17, 0xFF	; 255
     49c:	98 01       	movw	r18, r16
	}
	
	while( n>0 ) {
		int v = n%10;
     49e:	4a e0       	ldi	r20, 0x0A	; 10
     4a0:	e4 2e       	mov	r14, r20
     4a2:	f1 2c       	mov	r15, r1
	
	if( n<0 ) {
		*dest++ = '-';
	}
	
	while( n>0 ) {
     4a4:	18 16       	cp	r1, r24
     4a6:	19 06       	cpc	r1, r25
     4a8:	4c f4       	brge	.+18     	; 0x4bc <_i_to_str+0x76>
		int v = n%10;
     4aa:	b7 01       	movw	r22, r14
     4ac:	0e 94 2d 0d 	call	0x1a5a	; 0x1a5a <__divmodhi4>
		*p++ = v+'0';
     4b0:	80 5d       	subi	r24, 0xD0	; 208
     4b2:	d9 01       	movw	r26, r18
     4b4:	8d 93       	st	X+, r24
     4b6:	9d 01       	movw	r18, r26
		n = n/10;
     4b8:	cb 01       	movw	r24, r22
     4ba:	f4 cf       	rjmp	.-24     	; 0x4a4 <_i_to_str+0x5e>
	}

	if( p>temp ) {	// !necessary
     4bc:	02 17       	cp	r16, r18
     4be:	13 07       	cpc	r17, r19
     4c0:	78 f4       	brcc	.+30     	; 0x4e0 <_i_to_str+0x9a>
     4c2:	cf 01       	movw	r24, r30
     4c4:	b9 01       	movw	r22, r18
		do {
			p--;
			*dest++ = *p;
     4c6:	db 01       	movw	r26, r22
     4c8:	4e 91       	ld	r20, -X
     4ca:	bd 01       	movw	r22, r26
     4cc:	dc 01       	movw	r26, r24
     4ce:	4d 93       	st	X+, r20
     4d0:	cd 01       	movw	r24, r26
		} while( p!=temp );
     4d2:	06 17       	cp	r16, r22
     4d4:	17 07       	cpc	r17, r23
     4d6:	b9 f7       	brne	.-18     	; 0x4c6 <_i_to_str+0x80>
     4d8:	20 1b       	sub	r18, r16
     4da:	31 0b       	sbc	r19, r17
     4dc:	e2 0f       	add	r30, r18
     4de:	f3 1f       	adc	r31, r19
	}

	*dest = 0;
     4e0:	10 82       	st	Z, r1
     4e2:	c6 cf       	rjmp	.-116    	; 0x470 <_i_to_str+0x2a>

000004e4 <_Z10valueToStrP8rawValuePc>:

/**
 * convert the given value to string
 */

cstr valueToStr( rawValue* var, char* buffer ) {
     4e4:	4f 92       	push	r4
     4e6:	5f 92       	push	r5
     4e8:	6f 92       	push	r6
     4ea:	7f 92       	push	r7
     4ec:	8f 92       	push	r8
     4ee:	9f 92       	push	r9
     4f0:	af 92       	push	r10
     4f2:	bf 92       	push	r11
     4f4:	cf 92       	push	r12
     4f6:	df 92       	push	r13
     4f8:	ef 92       	push	r14
     4fa:	ff 92       	push	r15
     4fc:	cf 93       	push	r28
     4fe:	df 93       	push	r29
     500:	fc 01       	movw	r30, r24
     502:	eb 01       	movw	r28, r22

	*buffer = 0;
     504:	18 82       	st	Y, r1
	switch( var->attrs & PROPERTY_TYPE_MASK ) {
     506:	84 81       	ldd	r24, Z+4	; 0x04
     508:	87 70       	andi	r24, 0x07	; 7
     50a:	81 30       	cpi	r24, 0x01	; 1
     50c:	e1 f0       	breq	.+56     	; 0x546 <__stack+0x47>
     50e:	b0 f0       	brcs	.+44     	; 0x53c <__stack+0x3d>
     510:	82 30       	cpi	r24, 0x02	; 2
     512:	09 f4       	brne	.+2      	; 0x516 <__stack+0x17>
     514:	b5 c0       	rjmp	.+362    	; 0x680 <__stack+0x181>
     516:	83 30       	cpi	r24, 0x03	; 3
     518:	09 f4       	brne	.+2      	; 0x51c <__stack+0x1d>
     51a:	bb c0       	rjmp	.+374    	; 0x692 <__stack+0x193>
			return var->sval;
		}
	}

	return buffer;
}
     51c:	ce 01       	movw	r24, r28
     51e:	df 91       	pop	r29
     520:	cf 91       	pop	r28
     522:	ff 90       	pop	r15
     524:	ef 90       	pop	r14
     526:	df 90       	pop	r13
     528:	cf 90       	pop	r12
     52a:	bf 90       	pop	r11
     52c:	af 90       	pop	r10
     52e:	9f 90       	pop	r9
     530:	8f 90       	pop	r8
     532:	7f 90       	pop	r7
     534:	6f 90       	pop	r6
     536:	5f 90       	pop	r5
     538:	4f 90       	pop	r4
     53a:	08 95       	ret
cstr valueToStr( rawValue* var, char* buffer ) {

	*buffer = 0;
	switch( var->attrs & PROPERTY_TYPE_MASK ) {
		case PROPERTY_TYPE_INT: {
			_i_to_str( var->ival, buffer );
     53c:	80 81       	ld	r24, Z
     53e:	91 81       	ldd	r25, Z+1	; 0x01
     540:	0e 94 23 02 	call	0x446	; 0x446 <_i_to_str>
     544:	eb cf       	rjmp	.-42     	; 0x51c <__stack+0x1d>
			break;
		}

		case PROPERTY_TYPE_FLOAT: {
			_f_to_str( var->fval, 4, buffer );
     546:	c0 80       	ld	r12, Z
     548:	d1 80       	ldd	r13, Z+1	; 0x01
     54a:	e2 80       	ldd	r14, Z+2	; 0x02
     54c:	f3 80       	ldd	r15, Z+3	; 0x03

char* _f_to_str( float number, int digits, char* buffer ) {
	if( digits < 0 )
		digits = 2;

	if( isnan( number ) ) {
     54e:	a7 01       	movw	r20, r14
     550:	96 01       	movw	r18, r12
     552:	c7 01       	movw	r24, r14
     554:	b6 01       	movw	r22, r12
     556:	0e 94 28 0d 	call	0x1a50	; 0x1a50 <__unordsf2>
     55a:	88 23       	and	r24, r24
     55c:	39 f0       	breq	.+14     	; 0x56c <__stack+0x6d>
		buffer[0] = 'N';
     55e:	8e e4       	ldi	r24, 0x4E	; 78
     560:	88 83       	st	Y, r24
		buffer[1] = 'a';
     562:	91 e6       	ldi	r25, 0x61	; 97
     564:	99 83       	std	Y+1, r25	; 0x01
	}

	if( isinf( number ) ) {
		buffer[0] = 'I';
		buffer[1] = 'n';
		buffer[2] = 'f';
     566:	8a 83       	std	Y+2, r24	; 0x02
		buffer[3] = 0;
     568:	1b 82       	std	Y+3, r1	; 0x03
     56a:	d8 cf       	rjmp	.-80     	; 0x51c <__stack+0x1d>
		buffer[2] = 'N';
		buffer[3] = 0;
		return buffer+4;
	}

	if( isinf( number ) ) {
     56c:	46 01       	movw	r8, r12
     56e:	57 01       	movw	r10, r14
     570:	e8 94       	clt
     572:	b7 f8       	bld	r11, 7
     574:	2f ef       	ldi	r18, 0xFF	; 255
     576:	3f ef       	ldi	r19, 0xFF	; 255
     578:	4f e7       	ldi	r20, 0x7F	; 127
     57a:	5f e7       	ldi	r21, 0x7F	; 127
     57c:	c5 01       	movw	r24, r10
     57e:	b4 01       	movw	r22, r8
     580:	0e 94 28 0d 	call	0x1a50	; 0x1a50 <__unordsf2>
     584:	81 11       	cpse	r24, r1
     586:	10 c0       	rjmp	.+32     	; 0x5a8 <__stack+0xa9>
     588:	2f ef       	ldi	r18, 0xFF	; 255
     58a:	3f ef       	ldi	r19, 0xFF	; 255
     58c:	4f e7       	ldi	r20, 0x7F	; 127
     58e:	5f e7       	ldi	r21, 0x7F	; 127
     590:	c5 01       	movw	r24, r10
     592:	b4 01       	movw	r22, r8
     594:	0e 94 0f 0b 	call	0x161e	; 0x161e <__cmpsf2>
     598:	18 16       	cp	r1, r24
     59a:	34 f4       	brge	.+12     	; 0x5a8 <__stack+0xa9>
		buffer[0] = 'I';
     59c:	89 e4       	ldi	r24, 0x49	; 73
     59e:	88 83       	st	Y, r24
		buffer[1] = 'n';
     5a0:	8e e6       	ldi	r24, 0x6E	; 110
     5a2:	89 83       	std	Y+1, r24	; 0x01
		buffer[2] = 'f';
     5a4:	86 e6       	ldi	r24, 0x66	; 102
     5a6:	df cf       	rjmp	.-66     	; 0x566 <__stack+0x67>
		buffer[3] = 0;
		return buffer+4;
	}
		
	if( number < -4294967040.0 || number > 4294967040.0 ) {
     5a8:	2f ef       	ldi	r18, 0xFF	; 255
     5aa:	3f ef       	ldi	r19, 0xFF	; 255
     5ac:	4f e7       	ldi	r20, 0x7F	; 127
     5ae:	5f ec       	ldi	r21, 0xCF	; 207
     5b0:	c7 01       	movw	r24, r14
     5b2:	b6 01       	movw	r22, r12
     5b4:	0e 94 0f 0b 	call	0x161e	; 0x161e <__cmpsf2>
     5b8:	87 fd       	sbrc	r24, 7
     5ba:	f0 cf       	rjmp	.-32     	; 0x59c <__stack+0x9d>
     5bc:	2f ef       	ldi	r18, 0xFF	; 255
     5be:	3f ef       	ldi	r19, 0xFF	; 255
     5c0:	4f e7       	ldi	r20, 0x7F	; 127
     5c2:	5f e4       	ldi	r21, 0x4F	; 79
     5c4:	c7 01       	movw	r24, r14
     5c6:	b6 01       	movw	r22, r12
     5c8:	0e 94 23 0d 	call	0x1a46	; 0x1a46 <__gesf2>
     5cc:	18 16       	cp	r1, r24
     5ce:	34 f3       	brlt	.-52     	; 0x59c <__stack+0x9d>
		buffer[3] = 0;
		return buffer+4;
	}

	// Handle negative numbers
	if( number < 0.0 ) {
     5d0:	20 e0       	ldi	r18, 0x00	; 0
     5d2:	30 e0       	ldi	r19, 0x00	; 0
     5d4:	a9 01       	movw	r20, r18
     5d6:	c7 01       	movw	r24, r14
     5d8:	b6 01       	movw	r22, r12
     5da:	0e 94 0f 0b 	call	0x161e	; 0x161e <__cmpsf2>
		*buffer++ = '-';
     5de:	5e 01       	movw	r10, r28
		buffer[3] = 0;
		return buffer+4;
	}

	// Handle negative numbers
	if( number < 0.0 ) {
     5e0:	87 ff       	sbrs	r24, 7
     5e2:	09 c0       	rjmp	.+18     	; 0x5f6 <__stack+0xf7>
		*buffer++ = '-';
     5e4:	2f ef       	ldi	r18, 0xFF	; 255
     5e6:	a2 1a       	sub	r10, r18
     5e8:	b2 0a       	sbc	r11, r18
     5ea:	8d e2       	ldi	r24, 0x2D	; 45
     5ec:	88 83       	st	Y, r24
		number = -number;
     5ee:	f7 fa       	bst	r15, 7
     5f0:	f0 94       	com	r15
     5f2:	f7 f8       	bld	r15, 7
     5f4:	f0 94       	com	r15
	// Round correctly so that print(1.999, 2) prints as "2.00"
	double rounding = 0.5;
	for( int i = 0; i < digits; ++i )
		rounding /= 10.0;

	number += rounding;
     5f6:	26 e1       	ldi	r18, 0x16	; 22
     5f8:	37 eb       	ldi	r19, 0xB7	; 183
     5fa:	41 e5       	ldi	r20, 0x51	; 81
     5fc:	58 e3       	ldi	r21, 0x38	; 56
     5fe:	c7 01       	movw	r24, r14
     600:	b6 01       	movw	r22, r12
     602:	0e 94 88 0c 	call	0x1910	; 0x1910 <__addsf3>
     606:	2b 01       	movw	r4, r22
     608:	3c 01       	movw	r6, r24

	// Extract the integer part of the number and print it
	unsigned long int_part = (unsigned long)number;
     60a:	0e 94 f4 0c 	call	0x19e8	; 0x19e8 <__fixunssfsi>
     60e:	6b 01       	movw	r12, r22
	double remainder = number - (double)int_part;
     610:	0e 94 14 0b 	call	0x1628	; 0x1628 <__floatunsisf>
     614:	9b 01       	movw	r18, r22
     616:	ac 01       	movw	r20, r24
     618:	c3 01       	movw	r24, r6
     61a:	b2 01       	movw	r22, r4
     61c:	0e 94 87 0c 	call	0x190e	; 0x190e <__subsf3>
     620:	2b 01       	movw	r4, r22
     622:	3c 01       	movw	r6, r24
	buffer = _i_to_str( int_part, buffer );
     624:	b5 01       	movw	r22, r10
     626:	c6 01       	movw	r24, r12
     628:	0e 94 23 02 	call	0x446	; 0x446 <_i_to_str>
	
	// Print the decimal point, but only if there are digits beyond
	if( digits > 0 ) {
		*buffer++ = '.';
     62c:	2e e2       	ldi	r18, 0x2E	; 46
     62e:	fc 01       	movw	r30, r24
     630:	21 93       	st	Z+, r18
     632:	7f 01       	movw	r14, r30
     634:	6c 01       	movw	r12, r24
     636:	f5 e0       	ldi	r31, 0x05	; 5
     638:	cf 0e       	add	r12, r31
     63a:	d1 1c       	adc	r13, r1
	}

	// Extract digits from the remainder one at a time
	while( digits-- > 0 ) {
     63c:	ec 14       	cp	r14, r12
     63e:	fd 04       	cpc	r15, r13
     640:	09 f4       	brne	.+2      	; 0x644 <__stack+0x145>
     642:	6c cf       	rjmp	.-296    	; 0x51c <__stack+0x1d>
		remainder *= 10.0;
     644:	20 e0       	ldi	r18, 0x00	; 0
     646:	30 e0       	ldi	r19, 0x00	; 0
     648:	40 e2       	ldi	r20, 0x20	; 32
     64a:	51 e4       	ldi	r21, 0x41	; 65
     64c:	c3 01       	movw	r24, r6
     64e:	b2 01       	movw	r22, r4
     650:	0e 94 75 0b 	call	0x16ea	; 0x16ea <__mulsf3>
     654:	4b 01       	movw	r8, r22
     656:	5c 01       	movw	r10, r24
		unsigned int toPrint = (unsigned int)remainder;
     658:	0e 94 f4 0c 	call	0x19e8	; 0x19e8 <__fixunssfsi>
		*buffer++= toPrint+'0';
     65c:	20 e3       	ldi	r18, 0x30	; 48
     65e:	26 0f       	add	r18, r22
     660:	f7 01       	movw	r30, r14
     662:	21 93       	st	Z+, r18
     664:	7f 01       	movw	r14, r30
		remainder -= toPrint;
     666:	90 e0       	ldi	r25, 0x00	; 0
     668:	80 e0       	ldi	r24, 0x00	; 0
     66a:	0e 94 14 0b 	call	0x1628	; 0x1628 <__floatunsisf>
     66e:	9b 01       	movw	r18, r22
     670:	ac 01       	movw	r20, r24
     672:	c5 01       	movw	r24, r10
     674:	b4 01       	movw	r22, r8
     676:	0e 94 87 0c 	call	0x190e	; 0x190e <__subsf3>
     67a:	2b 01       	movw	r4, r22
     67c:	3c 01       	movw	r6, r24
     67e:	de cf       	rjmp	.-68     	; 0x63c <__stack+0x13d>
			break;
		}

		case PROPERTY_TYPE_ENUM: {
			//todo: check range.
			return var->evals[var->ival];
     680:	80 81       	ld	r24, Z
     682:	91 81       	ldd	r25, Z+1	; 0x01
     684:	88 0f       	add	r24, r24
     686:	99 1f       	adc	r25, r25
     688:	06 80       	ldd	r0, Z+6	; 0x06
     68a:	f7 81       	ldd	r31, Z+7	; 0x07
     68c:	e0 2d       	mov	r30, r0
     68e:	e8 0f       	add	r30, r24
     690:	f9 1f       	adc	r31, r25
		}

		case PROPERTY_TYPE_CSTR: {
			return var->sval;
     692:	c0 81       	ld	r28, Z
     694:	d1 81       	ldd	r29, Z+1	; 0x01
     696:	42 cf       	rjmp	.-380    	; 0x51c <__stack+0x1d>

00000698 <_str_eq>:
 * @return true is equals
 */

bool _str_eq( const char* s1, const char* s2 ) {

	if( !s1 || !s2 ) {
     698:	00 97       	sbiw	r24, 0x00	; 0
     69a:	81 f0       	breq	.+32     	; 0x6bc <_str_eq+0x24>
     69c:	61 15       	cp	r22, r1
     69e:	71 05       	cpc	r23, r1
     6a0:	69 f0       	breq	.+26     	; 0x6bc <_str_eq+0x24>
     6a2:	dc 01       	movw	r26, r24
     6a4:	fb 01       	movw	r30, r22
		return s1==s2;
	}

	while( *s1 && *s1 == *s2 ) {
     6a6:	8d 91       	ld	r24, X+
     6a8:	88 23       	and	r24, r24
     6aa:	19 f0       	breq	.+6      	; 0x6b2 <_str_eq+0x1a>
     6ac:	91 91       	ld	r25, Z+
     6ae:	89 17       	cp	r24, r25
     6b0:	d1 f3       	breq	.-12     	; 0x6a6 <_str_eq+0xe>
		s1++;
		s2++;
	}

	return *s1 == 0;
     6b2:	21 e0       	ldi	r18, 0x01	; 1
     6b4:	88 23       	and	r24, r24
     6b6:	31 f0       	breq	.+12     	; 0x6c4 <_str_eq+0x2c>
 */

bool _str_eq( const char* s1, const char* s2 ) {

	if( !s1 || !s2 ) {
		return s1==s2;
     6b8:	20 e0       	ldi	r18, 0x00	; 0
     6ba:	04 c0       	rjmp	.+8      	; 0x6c4 <_str_eq+0x2c>
     6bc:	21 e0       	ldi	r18, 0x01	; 1
     6be:	86 17       	cp	r24, r22
     6c0:	97 07       	cpc	r25, r23
     6c2:	d1 f7       	brne	.-12     	; 0x6b8 <_str_eq+0x20>
		s1++;
		s2++;
	}

	return *s1 == 0;
}
     6c4:	82 2f       	mov	r24, r18
     6c6:	08 95       	ret

000006c8 <_Z12findPropertyPKc>:
		}
		p = p->next;
	}

	return NULL;
}
     6c8:	90 e0       	ldi	r25, 0x00	; 0
     6ca:	80 e0       	ldi	r24, 0x00	; 0
     6cc:	08 95       	ret

000006ce <_ZN8Response5writeEh>:
	m_stream = stream;
	m_needCrc = needCrc;
}

// write implementations
void Response::write( byte t ) {
     6ce:	fc 01       	movw	r30, r24
	m_crc ^= t;
     6d0:	80 81       	ld	r24, Z
     6d2:	86 27       	eor	r24, r22
     6d4:	80 83       	st	Z, r24
	m_stream->write( t );
     6d6:	82 81       	ldd	r24, Z+2	; 0x02
     6d8:	93 81       	ldd	r25, Z+3	; 0x03
     6da:	dc 01       	movw	r26, r24
     6dc:	ed 91       	ld	r30, X+
     6de:	fc 91       	ld	r31, X
     6e0:	01 90       	ld	r0, Z+
     6e2:	f0 81       	ld	r31, Z
     6e4:	e0 2d       	mov	r30, r0
     6e6:	09 94       	ijmp

000006e8 <_ZN8Response5writeEPKc>:
}

void Response::write( const char* s ) {
     6e8:	0f 93       	push	r16
     6ea:	1f 93       	push	r17
     6ec:	cf 93       	push	r28
     6ee:	df 93       	push	r29
     6f0:	8c 01       	movw	r16, r24
     6f2:	eb 01       	movw	r28, r22
	char ch;
	while( ( ch = *s++ ) != 0 ) {
     6f4:	69 91       	ld	r22, Y+
     6f6:	66 23       	and	r22, r22
     6f8:	21 f0       	breq	.+8      	; 0x702 <_ZN8Response5writeEPKc+0x1a>
		write( ch );
     6fa:	c8 01       	movw	r24, r16
     6fc:	0e 94 67 03 	call	0x6ce	; 0x6ce <_ZN8Response5writeEh>
     700:	f9 cf       	rjmp	.-14     	; 0x6f4 <_ZN8Response5writeEPKc+0xc>
	}
}
     702:	df 91       	pop	r29
     704:	cf 91       	pop	r28
     706:	1f 91       	pop	r17
     708:	0f 91       	pop	r16
     70a:	08 95       	ret

0000070c <_ZN8Response4_endEv>:

/**
 *
 */

void Response::_end() {
     70c:	0f 93       	push	r16
     70e:	1f 93       	push	r17
     710:	cf 93       	push	r28
     712:	df 93       	push	r29
     714:	00 d0       	rcall	.+0      	; 0x716 <_ZN8Response4_endEv+0xa>
     716:	1f 92       	push	r1
     718:	cd b7       	in	r28, 0x3d	; 61
     71a:	de b7       	in	r29, 0x3e	; 62
     71c:	8c 01       	movw	r16, r24
	m_inFrame = false;
     71e:	fc 01       	movw	r30, r24
     720:	11 82       	std	Z+1, r1	; 0x01

	if( m_needCrc ) {
     722:	84 81       	ldd	r24, Z+4	; 0x04
     724:	88 23       	and	r24, r24
     726:	c1 f0       	breq	.+48     	; 0x758 <_ZN8Response4_endEv+0x4c>
		char buf[3] = { xtoa( ( m_crc >> 4 ) & 0xf ), xtoa( m_crc & 0xf ), 0 };
     728:	1b 82       	std	Y+3, r1	; 0x03
     72a:	80 81       	ld	r24, Z
     72c:	98 2f       	mov	r25, r24
     72e:	92 95       	swap	r25
     730:	9f 70       	andi	r25, 0x0F	; 15
/**
 * convert a single digit to an hex value digit
 */

char xtoa( byte v ) {
	return v < 0x0a ? ( v + '0' ) : ( v - 0x0a + 'A' );
     732:	9a 30       	cpi	r25, 0x0A	; 10
     734:	e8 f4       	brcc	.+58     	; 0x770 <_ZN8Response4_endEv+0x64>
     736:	90 5d       	subi	r25, 0xD0	; 208
     738:	99 83       	std	Y+1, r25	; 0x01
     73a:	8f 70       	andi	r24, 0x0F	; 15
     73c:	8a 30       	cpi	r24, 0x0A	; 10
     73e:	d0 f4       	brcc	.+52     	; 0x774 <_ZN8Response4_endEv+0x68>
     740:	80 5d       	subi	r24, 0xD0	; 208
     742:	8a 83       	std	Y+2, r24	; 0x02
		this->write( PROTOCOL_CHECKSUM_SEPARATOR );
     744:	6a e2       	ldi	r22, 0x2A	; 42
     746:	c8 01       	movw	r24, r16
     748:	0e 94 67 03 	call	0x6ce	; 0x6ce <_ZN8Response5writeEh>
		this->write( buf );
     74c:	be 01       	movw	r22, r28
     74e:	6f 5f       	subi	r22, 0xFF	; 255
     750:	7f 4f       	sbci	r23, 0xFF	; 255
     752:	c8 01       	movw	r24, r16
     754:	0e 94 74 03 	call	0x6e8	; 0x6e8 <_ZN8Response5writeEPKc>
	}

	this->write( PROTOCOL_EOT );
     758:	6a e0       	ldi	r22, 0x0A	; 10
     75a:	c8 01       	movw	r24, r16
     75c:	0e 94 67 03 	call	0x6ce	; 0x6ce <_ZN8Response5writeEh>
}
     760:	0f 90       	pop	r0
     762:	0f 90       	pop	r0
     764:	0f 90       	pop	r0
     766:	df 91       	pop	r29
     768:	cf 91       	pop	r28
     76a:	1f 91       	pop	r17
     76c:	0f 91       	pop	r16
     76e:	08 95       	ret
     770:	99 5c       	subi	r25, 0xC9	; 201
     772:	e2 cf       	rjmp	.-60     	; 0x738 <_ZN8Response4_endEv+0x2c>
     774:	89 5c       	subi	r24, 0xC9	; 201
     776:	e5 cf       	rjmp	.-54     	; 0x742 <_ZN8Response4_endEv+0x36>

00000778 <_ZN8Response9sendErrorEPKcS1_>:

/**
 * send an error
 */

void Response::sendError( const char* code, const char* description ) {
     778:	0f 93       	push	r16
     77a:	1f 93       	push	r17
     77c:	cf 93       	push	r28
     77e:	df 93       	push	r29
     780:	ec 01       	movw	r28, r24
     782:	8a 01       	movw	r16, r20
/**
 *
 */

void Response::_start() {
	m_crc = 0;
     784:	18 82       	st	Y, r1
	m_inFrame = true;
     786:	81 e0       	ldi	r24, 0x01	; 1
     788:	89 83       	std	Y+1, r24	; 0x01
 * send an error
 */

void Response::sendError( const char* code, const char* description ) {
	_start();
	write( code );
     78a:	ce 01       	movw	r24, r28
     78c:	0e 94 74 03 	call	0x6e8	; 0x6e8 <_ZN8Response5writeEPKc>
	write( PROTOCOL_SEPARATOR );
     790:	6b e3       	ldi	r22, 0x3B	; 59
     792:	ce 01       	movw	r24, r28
     794:	0e 94 67 03 	call	0x6ce	; 0x6ce <_ZN8Response5writeEh>
	write( description );
     798:	b8 01       	movw	r22, r16
     79a:	ce 01       	movw	r24, r28
     79c:	0e 94 74 03 	call	0x6e8	; 0x6e8 <_ZN8Response5writeEPKc>
	_end();
     7a0:	ce 01       	movw	r24, r28
}
     7a2:	df 91       	pop	r29
     7a4:	cf 91       	pop	r28
     7a6:	1f 91       	pop	r17
     7a8:	0f 91       	pop	r16
void Response::sendError( const char* code, const char* description ) {
	_start();
	write( code );
	write( PROTOCOL_SEPARATOR );
	write( description );
	_end();
     7aa:	0c 94 86 03 	jmp	0x70c	; 0x70c <_ZN8Response4_endEv>

000007ae <_Z8comErrorP6StreamPKcS2_.constprop.4>:

/**
 * send error result
 */

void comError( Stream* stream, const char* errCode, const char* desc ) {
     7ae:	cf 93       	push	r28
     7b0:	df 93       	push	r29
     7b2:	00 d0       	rcall	.+0      	; 0x7b4 <_Z8comErrorP6StreamPKcS2_.constprop.4+0x6>
     7b4:	00 d0       	rcall	.+0      	; 0x7b6 <_Z8comErrorP6StreamPKcS2_.constprop.4+0x8>
     7b6:	1f 92       	push	r1
     7b8:	cd b7       	in	r28, 0x3d	; 61
     7ba:	de b7       	in	r29, 0x3e	; 62
     7bc:	ab 01       	movw	r20, r22
/**
 *
 */

Response::Response( Stream* stream, bool needCrc ) {
	m_inFrame = false;
     7be:	1a 82       	std	Y+2, r1	; 0x02
	m_crc = 0;
     7c0:	19 82       	std	Y+1, r1	; 0x01
	m_stream = stream;
     7c2:	20 e0       	ldi	r18, 0x00	; 0
     7c4:	33 e0       	ldi	r19, 0x03	; 3
     7c6:	3c 83       	std	Y+4, r19	; 0x04
     7c8:	2b 83       	std	Y+3, r18	; 0x03
	m_needCrc = needCrc;
     7ca:	21 e0       	ldi	r18, 0x01	; 1
     7cc:	2d 83       	std	Y+5, r18	; 0x05
 * send error result
 */

void comError( Stream* stream, const char* errCode, const char* desc ) {
	Response r( stream, true );
	r.sendError( errCode, desc );
     7ce:	bc 01       	movw	r22, r24
     7d0:	ce 01       	movw	r24, r28
     7d2:	01 96       	adiw	r24, 0x01	; 1
     7d4:	0e 94 bc 03 	call	0x778	; 0x778 <_ZN8Response9sendErrorEPKcS1_>
	cState.pos = 0;
     7d8:	10 92 56 02 	sts	0x0256, r1	; 0x800256 <cState+0x1>
     7dc:	10 92 55 02 	sts	0x0255, r1	; 0x800255 <cState>
}
     7e0:	0f 90       	pop	r0
     7e2:	0f 90       	pop	r0
     7e4:	0f 90       	pop	r0
     7e6:	0f 90       	pop	r0
     7e8:	0f 90       	pop	r0
     7ea:	df 91       	pop	r29
     7ec:	cf 91       	pop	r28
     7ee:	08 95       	ret

000007f0 <_ZN8Response4sendEPKcS1_S1_S1_>:

/**
 * send a response
 */

void Response::send( const char* property, const char* attribute, const char* status, const char* value ) {
     7f0:	af 92       	push	r10
     7f2:	bf 92       	push	r11
     7f4:	cf 92       	push	r12
     7f6:	df 92       	push	r13
     7f8:	ef 92       	push	r14
     7fa:	ff 92       	push	r15
     7fc:	0f 93       	push	r16
     7fe:	1f 93       	push	r17
     800:	cf 93       	push	r28
     802:	df 93       	push	r29
     804:	ec 01       	movw	r28, r24
     806:	5b 01       	movw	r10, r22
     808:	6a 01       	movw	r12, r20
     80a:	79 01       	movw	r14, r18
/**
 *
 */

void Response::_start() {
	m_crc = 0;
     80c:	18 82       	st	Y, r1
	m_inFrame = true;
     80e:	81 e0       	ldi	r24, 0x01	; 1
     810:	89 83       	std	Y+1, r24	; 0x01
 */

void Response::send( const char* property, const char* attribute, const char* status, const char* value ) {
	_start();

	write( "M00" );
     812:	64 e4       	ldi	r22, 0x44	; 68
     814:	71 e0       	ldi	r23, 0x01	; 1
     816:	ce 01       	movw	r24, r28
     818:	0e 94 74 03 	call	0x6e8	; 0x6e8 <_ZN8Response5writeEPKc>
	write( PROTOCOL_SEPARATOR );
     81c:	6b e3       	ldi	r22, 0x3B	; 59
     81e:	ce 01       	movw	r24, r28
     820:	0e 94 67 03 	call	0x6ce	; 0x6ce <_ZN8Response5writeEh>

	write( property );
     824:	b5 01       	movw	r22, r10
     826:	ce 01       	movw	r24, r28
     828:	0e 94 74 03 	call	0x6e8	; 0x6e8 <_ZN8Response5writeEPKc>
	write( PROTOCOL_SEPARATOR );
     82c:	6b e3       	ldi	r22, 0x3B	; 59
     82e:	ce 01       	movw	r24, r28
     830:	0e 94 67 03 	call	0x6ce	; 0x6ce <_ZN8Response5writeEh>

	write( attribute );
     834:	b6 01       	movw	r22, r12
     836:	ce 01       	movw	r24, r28
     838:	0e 94 74 03 	call	0x6e8	; 0x6e8 <_ZN8Response5writeEPKc>

	if( status ) {
     83c:	e1 14       	cp	r14, r1
     83e:	f1 04       	cpc	r15, r1
     840:	99 f0       	breq	.+38     	; 0x868 <_ZN8Response4sendEPKcS1_S1_S1_+0x78>
		write( PROTOCOL_SEPARATOR );
     842:	6b e3       	ldi	r22, 0x3B	; 59
     844:	ce 01       	movw	r24, r28
     846:	0e 94 67 03 	call	0x6ce	; 0x6ce <_ZN8Response5writeEh>
		write( status );
     84a:	b7 01       	movw	r22, r14
     84c:	ce 01       	movw	r24, r28
     84e:	0e 94 74 03 	call	0x6e8	; 0x6e8 <_ZN8Response5writeEPKc>

		if( value ) {
     852:	01 15       	cp	r16, r1
     854:	11 05       	cpc	r17, r1
     856:	41 f0       	breq	.+16     	; 0x868 <_ZN8Response4sendEPKcS1_S1_S1_+0x78>
			write( PROTOCOL_SEPARATOR );
     858:	6b e3       	ldi	r22, 0x3B	; 59
     85a:	ce 01       	movw	r24, r28
     85c:	0e 94 67 03 	call	0x6ce	; 0x6ce <_ZN8Response5writeEh>
			write( value );
     860:	b8 01       	movw	r22, r16
     862:	ce 01       	movw	r24, r28
     864:	0e 94 74 03 	call	0x6e8	; 0x6e8 <_ZN8Response5writeEPKc>
		}
	}

	_end();
     868:	ce 01       	movw	r24, r28
}
     86a:	df 91       	pop	r29
     86c:	cf 91       	pop	r28
     86e:	1f 91       	pop	r17
     870:	0f 91       	pop	r16
     872:	ff 90       	pop	r15
     874:	ef 90       	pop	r14
     876:	df 90       	pop	r13
     878:	cf 90       	pop	r12
     87a:	bf 90       	pop	r11
     87c:	af 90       	pop	r10
			write( PROTOCOL_SEPARATOR );
			write( value );
		}
	}

	_end();
     87e:	0c 94 86 03 	jmp	0x70c	; 0x70c <_ZN8Response4_endEv>

00000882 <_Z11set_variantP8rawValuePKc>:

/**
 *
 */

int set_variant( rawValue* var, cstr v ) {
     882:	cf 92       	push	r12
     884:	df 92       	push	r13
     886:	ef 92       	push	r14
     888:	ff 92       	push	r15
     88a:	0f 93       	push	r16
     88c:	1f 93       	push	r17
     88e:	cf 93       	push	r28
     890:	df 93       	push	r29
     892:	ec 01       	movw	r28, r24
	// check !readonly
	if( var->attrs & PROPERTY_FLAG_READONLY ) {
     894:	9c 81       	ldd	r25, Y+4	; 0x04
     896:	97 fd       	sbrc	r25, 7
     898:	3b c0       	rjmp	.+118    	; 0x910 <_Z11set_variantP8rawValuePKc+0x8e>
     89a:	8b 01       	movw	r16, r22
		return -1;
	}

	const byte type = var->attrs & PROPERTY_TYPE_MASK;
     89c:	97 70       	andi	r25, 0x07	; 7

	if( type== PROPERTY_TYPE_ENUM ) {
     89e:	92 30       	cpi	r25, 0x02	; 2
     8a0:	01 f5       	brne	.+64     	; 0x8e2 <_Z11set_variantP8rawValuePKc+0x60>
     8a2:	ce 80       	ldd	r12, Y+6	; 0x06
     8a4:	df 80       	ldd	r13, Y+7	; 0x07
		for( int i=0; ; i++ ) {
     8a6:	f1 2c       	mov	r15, r1
     8a8:	e1 2c       	mov	r14, r1
			cstr p = var->evals[i];
     8aa:	f6 01       	movw	r30, r12
     8ac:	81 91       	ld	r24, Z+
     8ae:	91 91       	ld	r25, Z+
     8b0:	6f 01       	movw	r12, r30
			if( !p ) {
     8b2:	00 97       	sbiw	r24, 0x00	; 0
     8b4:	81 f1       	breq	.+96     	; 0x916 <_Z11set_variantP8rawValuePKc+0x94>
				break;
			}

			if( _str_eq(p,v) ) {
     8b6:	b8 01       	movw	r22, r16
     8b8:	0e 94 4c 03 	call	0x698	; 0x698 <_str_eq>
     8bc:	88 23       	and	r24, r24
     8be:	69 f0       	breq	.+26     	; 0x8da <_Z11set_variantP8rawValuePKc+0x58>
				var->ival = i;
     8c0:	f9 82       	std	Y+1, r15	; 0x01
     8c2:	e8 82       	st	Y, r14
	else if( type != PROPERTY_TYPE_CSTR ) {

		// char* set in int
		if( type == PROPERTY_TYPE_INT ) {
			var->ival = atoi( v );
			return 0;
     8c4:	90 e0       	ldi	r25, 0x00	; 0
     8c6:	80 e0       	ldi	r24, 0x00	; 0
	}

	// ok, can set value
	var->sval = v;
	return 0;
}
     8c8:	df 91       	pop	r29
     8ca:	cf 91       	pop	r28
     8cc:	1f 91       	pop	r17
     8ce:	0f 91       	pop	r16
     8d0:	ff 90       	pop	r15
     8d2:	ef 90       	pop	r14
     8d4:	df 90       	pop	r13
     8d6:	cf 90       	pop	r12
     8d8:	08 95       	ret
	}

	const byte type = var->attrs & PROPERTY_TYPE_MASK;

	if( type== PROPERTY_TYPE_ENUM ) {
		for( int i=0; ; i++ ) {
     8da:	ff ef       	ldi	r31, 0xFF	; 255
     8dc:	ef 1a       	sub	r14, r31
     8de:	ff 0a       	sbc	r15, r31
     8e0:	e4 cf       	rjmp	.-56     	; 0x8aa <_Z11set_variantP8rawValuePKc+0x28>
			}
		}
		
		return -2;
	}
	else if( type != PROPERTY_TYPE_CSTR ) {
     8e2:	93 30       	cpi	r25, 0x03	; 3
     8e4:	91 f0       	breq	.+36     	; 0x90a <_Z11set_variantP8rawValuePKc+0x88>

		// char* set in int
		if( type == PROPERTY_TYPE_INT ) {
     8e6:	91 11       	cpse	r25, r1
     8e8:	06 c0       	rjmp	.+12     	; 0x8f6 <_Z11set_variantP8rawValuePKc+0x74>
			var->ival = atoi( v );
     8ea:	cb 01       	movw	r24, r22
     8ec:	0e 94 78 09 	call	0x12f0	; 0x12f0 <atoi>
     8f0:	99 83       	std	Y+1, r25	; 0x01
     8f2:	88 83       	st	Y, r24
     8f4:	e7 cf       	rjmp	.-50     	; 0x8c4 <_Z11set_variantP8rawValuePKc+0x42>
			return 0;
		}

		// char* set in float
		if( type == PROPERTY_TYPE_FLOAT ) {
     8f6:	91 30       	cpi	r25, 0x01	; 1
     8f8:	71 f4       	brne	.+28     	; 0x916 <_Z11set_variantP8rawValuePKc+0x94>
			var->fval = atof( v );
     8fa:	cb 01       	movw	r24, r22
     8fc:	0e 94 74 09 	call	0x12e8	; 0x12e8 <atof>
     900:	68 83       	st	Y, r22
     902:	79 83       	std	Y+1, r23	; 0x01
     904:	8a 83       	std	Y+2, r24	; 0x02
     906:	9b 83       	std	Y+3, r25	; 0x03
     908:	dd cf       	rjmp	.-70     	; 0x8c4 <_Z11set_variantP8rawValuePKc+0x42>

		return -2;
	}

	// ok, can set value
	var->sval = v;
     90a:	79 83       	std	Y+1, r23	; 0x01
     90c:	68 83       	st	Y, r22
     90e:	da cf       	rjmp	.-76     	; 0x8c4 <_Z11set_variantP8rawValuePKc+0x42>
 */

int set_variant( rawValue* var, cstr v ) {
	// check !readonly
	if( var->attrs & PROPERTY_FLAG_READONLY ) {
		return -1;
     910:	8f ef       	ldi	r24, 0xFF	; 255
     912:	9f ef       	ldi	r25, 0xFF	; 255
     914:	d9 cf       	rjmp	.-78     	; 0x8c8 <_Z11set_variantP8rawValuePKc+0x46>
				var->ival = i;
				return 0;
			}
		}
		
		return -2;
     916:	8e ef       	ldi	r24, 0xFE	; 254
     918:	9f ef       	ldi	r25, 0xFF	; 255
     91a:	d6 cf       	rjmp	.-84     	; 0x8c8 <_Z11set_variantP8rawValuePKc+0x46>

0000091c <__vector_19>:
#elif defined(USART_UDRE_vect)
ISR(USART_UDRE_vect)
#else
  #error "Don't know what the Data Register Empty vector is called for Serial"
#endif
{
     91c:	1f 92       	push	r1
     91e:	0f 92       	push	r0
     920:	0f b6       	in	r0, 0x3f	; 63
     922:	0f 92       	push	r0
     924:	11 24       	eor	r1, r1
     926:	2f 93       	push	r18
     928:	3f 93       	push	r19
     92a:	4f 93       	push	r20
     92c:	5f 93       	push	r21
     92e:	6f 93       	push	r22
     930:	7f 93       	push	r23
     932:	8f 93       	push	r24
     934:	9f 93       	push	r25
     936:	af 93       	push	r26
     938:	bf 93       	push	r27
     93a:	ef 93       	push	r30
     93c:	ff 93       	push	r31
  Serial._tx_udr_empty_irq();
     93e:	80 e0       	ldi	r24, 0x00	; 0
     940:	93 e0       	ldi	r25, 0x03	; 3
     942:	0e 94 6e 01 	call	0x2dc	; 0x2dc <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
}
     946:	ff 91       	pop	r31
     948:	ef 91       	pop	r30
     94a:	bf 91       	pop	r27
     94c:	af 91       	pop	r26
     94e:	9f 91       	pop	r25
     950:	8f 91       	pop	r24
     952:	7f 91       	pop	r23
     954:	6f 91       	pop	r22
     956:	5f 91       	pop	r21
     958:	4f 91       	pop	r20
     95a:	3f 91       	pop	r19
     95c:	2f 91       	pop	r18
     95e:	0f 90       	pop	r0
     960:	0f be       	out	0x3f, r0	; 63
     962:	0f 90       	pop	r0
     964:	1f 90       	pop	r1
     966:	18 95       	reti

00000968 <__vector_18>:
#elif defined(USART_RXC_vect)
  ISR(USART_RXC_vect) // ATmega8
#else
  #error "Don't know what the Data Received vector is called for Serial"
#endif
  {
     968:	1f 92       	push	r1
     96a:	0f 92       	push	r0
     96c:	0f b6       	in	r0, 0x3f	; 63
     96e:	0f 92       	push	r0
     970:	11 24       	eor	r1, r1
     972:	2f 93       	push	r18
     974:	8f 93       	push	r24
     976:	9f 93       	push	r25
     978:	ef 93       	push	r30
     97a:	ff 93       	push	r31

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
     97c:	e0 91 10 03 	lds	r30, 0x0310	; 0x800310 <Serial+0x10>
     980:	f0 91 11 03 	lds	r31, 0x0311	; 0x800311 <Serial+0x11>
     984:	80 81       	ld	r24, Z
     986:	e0 91 16 03 	lds	r30, 0x0316	; 0x800316 <Serial+0x16>
     98a:	f0 91 17 03 	lds	r31, 0x0317	; 0x800317 <Serial+0x17>
     98e:	82 fd       	sbrc	r24, 2
     990:	1b c0       	rjmp	.+54     	; 0x9c8 <__vector_18+0x60>
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
     992:	90 81       	ld	r25, Z
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
     994:	80 91 19 03 	lds	r24, 0x0319	; 0x800319 <Serial+0x19>
     998:	8f 5f       	subi	r24, 0xFF	; 255
     99a:	8f 73       	andi	r24, 0x3F	; 63

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
     99c:	20 91 1a 03 	lds	r18, 0x031A	; 0x80031a <Serial+0x1a>
     9a0:	82 17       	cp	r24, r18
     9a2:	41 f0       	breq	.+16     	; 0x9b4 <__vector_18+0x4c>
      _rx_buffer[_rx_buffer_head] = c;
     9a4:	e0 91 19 03 	lds	r30, 0x0319	; 0x800319 <Serial+0x19>
     9a8:	f0 e0       	ldi	r31, 0x00	; 0
     9aa:	e0 50       	subi	r30, 0x00	; 0
     9ac:	fd 4f       	sbci	r31, 0xFD	; 253
     9ae:	95 8f       	std	Z+29, r25	; 0x1d
      _rx_buffer_head = i;
     9b0:	80 93 19 03 	sts	0x0319, r24	; 0x800319 <Serial+0x19>
    Serial._rx_complete_irq();
  }
     9b4:	ff 91       	pop	r31
     9b6:	ef 91       	pop	r30
     9b8:	9f 91       	pop	r25
     9ba:	8f 91       	pop	r24
     9bc:	2f 91       	pop	r18
     9be:	0f 90       	pop	r0
     9c0:	0f be       	out	0x3f, r0	; 63
     9c2:	0f 90       	pop	r0
     9c4:	1f 90       	pop	r1
     9c6:	18 95       	reti
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
     9c8:	80 81       	ld	r24, Z
     9ca:	f4 cf       	rjmp	.-24     	; 0x9b4 <__vector_18+0x4c>

000009cc <__vector_16>:
#if defined(TIM0_OVF_vect)
ISR(TIM0_OVF_vect)
#else
ISR(TIMER0_OVF_vect)
#endif
{
     9cc:	1f 92       	push	r1
     9ce:	0f 92       	push	r0
     9d0:	0f b6       	in	r0, 0x3f	; 63
     9d2:	0f 92       	push	r0
     9d4:	11 24       	eor	r1, r1
     9d6:	2f 93       	push	r18
     9d8:	3f 93       	push	r19
     9da:	8f 93       	push	r24
     9dc:	9f 93       	push	r25
     9de:	af 93       	push	r26
     9e0:	bf 93       	push	r27
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
     9e2:	80 91 51 02 	lds	r24, 0x0251	; 0x800251 <timer0_millis>
     9e6:	90 91 52 02 	lds	r25, 0x0252	; 0x800252 <timer0_millis+0x1>
     9ea:	a0 91 53 02 	lds	r26, 0x0253	; 0x800253 <timer0_millis+0x2>
     9ee:	b0 91 54 02 	lds	r27, 0x0254	; 0x800254 <timer0_millis+0x3>
	unsigned char f = timer0_fract;
     9f2:	30 91 50 02 	lds	r19, 0x0250	; 0x800250 <timer0_fract>

	m += MILLIS_INC;
	f += FRACT_INC;
     9f6:	23 e0       	ldi	r18, 0x03	; 3
     9f8:	23 0f       	add	r18, r19
	if (f >= FRACT_MAX) {
     9fa:	2d 37       	cpi	r18, 0x7D	; 125
     9fc:	58 f5       	brcc	.+86     	; 0xa54 <__vector_16+0x88>
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
	unsigned char f = timer0_fract;

	m += MILLIS_INC;
     9fe:	01 96       	adiw	r24, 0x01	; 1
     a00:	a1 1d       	adc	r26, r1
     a02:	b1 1d       	adc	r27, r1
	if (f >= FRACT_MAX) {
		f -= FRACT_MAX;
		m += 1;
	}

	timer0_fract = f;
     a04:	20 93 50 02 	sts	0x0250, r18	; 0x800250 <timer0_fract>
	timer0_millis = m;
     a08:	80 93 51 02 	sts	0x0251, r24	; 0x800251 <timer0_millis>
     a0c:	90 93 52 02 	sts	0x0252, r25	; 0x800252 <timer0_millis+0x1>
     a10:	a0 93 53 02 	sts	0x0253, r26	; 0x800253 <timer0_millis+0x2>
     a14:	b0 93 54 02 	sts	0x0254, r27	; 0x800254 <timer0_millis+0x3>
	timer0_overflow_count++;
     a18:	80 91 4c 02 	lds	r24, 0x024C	; 0x80024c <__data_end>
     a1c:	90 91 4d 02 	lds	r25, 0x024D	; 0x80024d <__data_end+0x1>
     a20:	a0 91 4e 02 	lds	r26, 0x024E	; 0x80024e <__data_end+0x2>
     a24:	b0 91 4f 02 	lds	r27, 0x024F	; 0x80024f <__data_end+0x3>
     a28:	01 96       	adiw	r24, 0x01	; 1
     a2a:	a1 1d       	adc	r26, r1
     a2c:	b1 1d       	adc	r27, r1
     a2e:	80 93 4c 02 	sts	0x024C, r24	; 0x80024c <__data_end>
     a32:	90 93 4d 02 	sts	0x024D, r25	; 0x80024d <__data_end+0x1>
     a36:	a0 93 4e 02 	sts	0x024E, r26	; 0x80024e <__data_end+0x2>
     a3a:	b0 93 4f 02 	sts	0x024F, r27	; 0x80024f <__data_end+0x3>
}
     a3e:	bf 91       	pop	r27
     a40:	af 91       	pop	r26
     a42:	9f 91       	pop	r25
     a44:	8f 91       	pop	r24
     a46:	3f 91       	pop	r19
     a48:	2f 91       	pop	r18
     a4a:	0f 90       	pop	r0
     a4c:	0f be       	out	0x3f, r0	; 63
     a4e:	0f 90       	pop	r0
     a50:	1f 90       	pop	r1
     a52:	18 95       	reti
	unsigned char f = timer0_fract;

	m += MILLIS_INC;
	f += FRACT_INC;
	if (f >= FRACT_MAX) {
		f -= FRACT_MAX;
     a54:	26 e8       	ldi	r18, 0x86	; 134
     a56:	23 0f       	add	r18, r19
		m += 1;
     a58:	02 96       	adiw	r24, 0x02	; 2
     a5a:	a1 1d       	adc	r26, r1
     a5c:	b1 1d       	adc	r27, r1
     a5e:	d2 cf       	rjmp	.-92     	; 0xa04 <__vector_16+0x38>

00000a60 <_Z12addAttributeP11rawPropertyP12rawAttribute>:
	}
}

void addAttribute( rawProperty* p, rawAttribute* a ) {
	
	if( !p->attrs ) {
     a60:	dc 01       	movw	r26, r24
     a62:	12 96       	adiw	r26, 0x02	; 2
     a64:	ed 91       	ld	r30, X+
     a66:	fc 91       	ld	r31, X
     a68:	13 97       	sbiw	r26, 0x03	; 3
     a6a:	30 97       	sbiw	r30, 0x00	; 0
     a6c:	31 f4       	brne	.+12     	; 0xa7a <_Z12addAttributeP11rawPropertyP12rawAttribute+0x1a>
		p->attrs = a;
     a6e:	13 96       	adiw	r26, 0x03	; 3
     a70:	7c 93       	st	X, r23
     a72:	6e 93       	st	-X, r22
     a74:	12 97       	sbiw	r26, 0x02	; 2
     a76:	08 95       	ret
	}
	else {
		rawAttribute* pa = p->attrs;
		while( pa->next ) {
     a78:	fc 01       	movw	r30, r24
     a7a:	84 85       	ldd	r24, Z+12	; 0x0c
     a7c:	95 85       	ldd	r25, Z+13	; 0x0d
     a7e:	00 97       	sbiw	r24, 0x00	; 0
     a80:	d9 f7       	brne	.-10     	; 0xa78 <_Z12addAttributeP11rawPropertyP12rawAttribute+0x18>
			pa = pa->next;
		}

		pa->next = a;
     a82:	75 87       	std	Z+13, r23	; 0x0d
     a84:	64 87       	std	Z+12, r22	; 0x0c
	}
}
     a86:	08 95       	ret

00000a88 <_GLOBAL__I_65535_0_test_02.ino.cpp.o.1988>:
     a88:	4f 92       	push	r4
     a8a:	5f 92       	push	r5
     a8c:	6f 92       	push	r6
     a8e:	7f 92       	push	r7
     a90:	9f 92       	push	r9
     a92:	af 92       	push	r10
     a94:	bf 92       	push	r11
     a96:	cf 92       	push	r12
     a98:	df 92       	push	r13
     a9a:	ef 92       	push	r14
     a9c:	ff 92       	push	r15
     a9e:	0f 93       	push	r16
     aa0:	1f 93       	push	r17
     aa2:	cf 93       	push	r28
     aa4:	df 93       	push	r29
     aa6:	e0 e0       	ldi	r30, 0x00	; 0
     aa8:	f3 e0       	ldi	r31, 0x03	; 3
     aaa:	13 82       	std	Z+3, r1	; 0x03
     aac:	12 82       	std	Z+2, r1	; 0x02
     aae:	88 ee       	ldi	r24, 0xE8	; 232
     ab0:	93 e0       	ldi	r25, 0x03	; 3
     ab2:	a0 e0       	ldi	r26, 0x00	; 0
     ab4:	b0 e0       	ldi	r27, 0x00	; 0
     ab6:	84 83       	std	Z+4, r24	; 0x04
     ab8:	95 83       	std	Z+5, r25	; 0x05
     aba:	a6 83       	std	Z+6, r26	; 0x06
     abc:	b7 83       	std	Z+7, r27	; 0x07
     abe:	86 e3       	ldi	r24, 0x36	; 54
     ac0:	91 e0       	ldi	r25, 0x01	; 1
     ac2:	91 83       	std	Z+1, r25	; 0x01
     ac4:	80 83       	st	Z, r24
     ac6:	85 ec       	ldi	r24, 0xC5	; 197
     ac8:	90 e0       	ldi	r25, 0x00	; 0
     aca:	95 87       	std	Z+13, r25	; 0x0d
     acc:	84 87       	std	Z+12, r24	; 0x0c
     ace:	84 ec       	ldi	r24, 0xC4	; 196
     ad0:	90 e0       	ldi	r25, 0x00	; 0
     ad2:	97 87       	std	Z+15, r25	; 0x0f
     ad4:	86 87       	std	Z+14, r24	; 0x0e
     ad6:	80 ec       	ldi	r24, 0xC0	; 192
     ad8:	90 e0       	ldi	r25, 0x00	; 0
     ada:	91 8b       	std	Z+17, r25	; 0x11
     adc:	80 8b       	std	Z+16, r24	; 0x10
     ade:	81 ec       	ldi	r24, 0xC1	; 193
     ae0:	90 e0       	ldi	r25, 0x00	; 0
     ae2:	93 8b       	std	Z+19, r25	; 0x13
     ae4:	82 8b       	std	Z+18, r24	; 0x12
     ae6:	82 ec       	ldi	r24, 0xC2	; 194
     ae8:	90 e0       	ldi	r25, 0x00	; 0
     aea:	95 8b       	std	Z+21, r25	; 0x15
     aec:	84 8b       	std	Z+20, r24	; 0x14
     aee:	86 ec       	ldi	r24, 0xC6	; 198
     af0:	90 e0       	ldi	r25, 0x00	; 0
     af2:	97 8b       	std	Z+23, r25	; 0x17
     af4:	86 8b       	std	Z+22, r24	; 0x16
     af6:	11 8e       	std	Z+25, r1	; 0x19
     af8:	12 8e       	std	Z+26, r1	; 0x1a
     afa:	13 8e       	std	Z+27, r1	; 0x1b
     afc:	14 8e       	std	Z+28, r1	; 0x1c
     afe:	88 e4       	ldi	r24, 0x48	; 72
     b00:	91 e0       	ldi	r25, 0x01	; 1
     b02:	90 93 28 04 	sts	0x0428, r25	; 0x800428 <_ZZN10__autoCallC4EvE1p+0x1>
     b06:	80 93 27 04 	sts	0x0427, r24	; 0x800427 <_ZZN10__autoCallC4EvE1p>
     b0a:	e9 e1       	ldi	r30, 0x19	; 25
     b0c:	f4 e0       	ldi	r31, 0x04	; 4
     b0e:	c6 e5       	ldi	r28, 0x56	; 86
     b10:	d1 e0       	ldi	r29, 0x01	; 1
     b12:	d1 83       	std	Z+1, r29	; 0x01
     b14:	c0 83       	st	Z, r28
     b16:	13 86       	std	Z+11, r1	; 0x0b
     b18:	12 86       	std	Z+10, r1	; 0x0a
     b1a:	99 24       	eor	r9, r9
     b1c:	93 94       	inc	r9
     b1e:	96 82       	std	Z+6, r9	; 0x06
     b20:	12 82       	std	Z+2, r1	; 0x02
     b22:	13 82       	std	Z+3, r1	; 0x03
     b24:	14 82       	std	Z+4, r1	; 0x04
     b26:	15 82       	std	Z+5, r1	; 0x05
     b28:	17 82       	std	Z+7, r1	; 0x07
     b2a:	89 ef       	ldi	r24, 0xF9	; 249
     b2c:	90 e0       	ldi	r25, 0x00	; 0
     b2e:	91 87       	std	Z+9, r25	; 0x09
     b30:	80 87       	std	Z+8, r24	; 0x08
     b32:	15 86       	std	Z+13, r1	; 0x0d
     b34:	14 86       	std	Z+12, r1	; 0x0c
     b36:	bf 01       	movw	r22, r30
     b38:	87 e2       	ldi	r24, 0x27	; 39
     b3a:	94 e0       	ldi	r25, 0x04	; 4
     b3c:	0e 94 30 05 	call	0xa60	; 0xa60 <_Z12addAttributeP11rawPropertyP12rawAttribute>
     b40:	eb e0       	ldi	r30, 0x0B	; 11
     b42:	f4 e0       	ldi	r31, 0x04	; 4
     b44:	8c e5       	ldi	r24, 0x5C	; 92
     b46:	a8 2e       	mov	r10, r24
     b48:	81 e0       	ldi	r24, 0x01	; 1
     b4a:	b8 2e       	mov	r11, r24
     b4c:	b1 82       	std	Z+1, r11	; 0x01
     b4e:	a0 82       	st	Z, r10
     b50:	13 86       	std	Z+11, r1	; 0x0b
     b52:	12 86       	std	Z+10, r1	; 0x0a
     b54:	01 e8       	ldi	r16, 0x81	; 129
     b56:	06 83       	std	Z+6, r16	; 0x06
     b58:	12 82       	std	Z+2, r1	; 0x02
     b5a:	13 82       	std	Z+3, r1	; 0x03
     b5c:	14 82       	std	Z+4, r1	; 0x04
     b5e:	15 82       	std	Z+5, r1	; 0x05
     b60:	17 82       	std	Z+7, r1	; 0x07
     b62:	89 ef       	ldi	r24, 0xF9	; 249
     b64:	90 e0       	ldi	r25, 0x00	; 0
     b66:	91 87       	std	Z+9, r25	; 0x09
     b68:	80 87       	std	Z+8, r24	; 0x08
     b6a:	15 86       	std	Z+13, r1	; 0x0d
     b6c:	14 86       	std	Z+12, r1	; 0x0c
     b6e:	bf 01       	movw	r22, r30
     b70:	87 e2       	ldi	r24, 0x27	; 39
     b72:	94 e0       	ldi	r25, 0x04	; 4
     b74:	0e 94 30 05 	call	0xa60	; 0xa60 <_Z12addAttributeP11rawPropertyP12rawAttribute>
     b78:	ed ef       	ldi	r30, 0xFD	; 253
     b7a:	f3 e0       	ldi	r31, 0x03	; 3
     b7c:	90 e6       	ldi	r25, 0x60	; 96
     b7e:	c9 2e       	mov	r12, r25
     b80:	91 e0       	ldi	r25, 0x01	; 1
     b82:	d9 2e       	mov	r13, r25
     b84:	d1 82       	std	Z+1, r13	; 0x01
     b86:	c0 82       	st	Z, r12
     b88:	13 86       	std	Z+11, r1	; 0x0b
     b8a:	12 86       	std	Z+10, r1	; 0x0a
     b8c:	06 83       	std	Z+6, r16	; 0x06
     b8e:	41 2c       	mov	r4, r1
     b90:	51 2c       	mov	r5, r1
     b92:	24 eb       	ldi	r18, 0xB4	; 180
     b94:	62 2e       	mov	r6, r18
     b96:	23 e4       	ldi	r18, 0x43	; 67
     b98:	72 2e       	mov	r7, r18
     b9a:	42 82       	std	Z+2, r4	; 0x02
     b9c:	53 82       	std	Z+3, r5	; 0x03
     b9e:	64 82       	std	Z+4, r6	; 0x04
     ba0:	75 82       	std	Z+5, r7	; 0x05
     ba2:	17 82       	std	Z+7, r1	; 0x07
     ba4:	89 ef       	ldi	r24, 0xF9	; 249
     ba6:	90 e0       	ldi	r25, 0x00	; 0
     ba8:	91 87       	std	Z+9, r25	; 0x09
     baa:	80 87       	std	Z+8, r24	; 0x08
     bac:	15 86       	std	Z+13, r1	; 0x0d
     bae:	14 86       	std	Z+12, r1	; 0x0c
     bb0:	bf 01       	movw	r22, r30
     bb2:	87 e2       	ldi	r24, 0x27	; 39
     bb4:	94 e0       	ldi	r25, 0x04	; 4
     bb6:	0e 94 30 05 	call	0xa60	; 0xa60 <_Z12addAttributeP11rawPropertyP12rawAttribute>
     bba:	80 e0       	ldi	r24, 0x00	; 0
     bbc:	90 e0       	ldi	r25, 0x00	; 0
     bbe:	dc 01       	movw	r26, r24
     bc0:	84 e6       	ldi	r24, 0x64	; 100
     bc2:	91 e0       	ldi	r25, 0x01	; 1
     bc4:	ef ee       	ldi	r30, 0xEF	; 239
     bc6:	f3 e0       	ldi	r31, 0x03	; 3
     bc8:	3b e6       	ldi	r19, 0x6B	; 107
     bca:	e3 2e       	mov	r14, r19
     bcc:	31 e0       	ldi	r19, 0x01	; 1
     bce:	f3 2e       	mov	r15, r19
     bd0:	f1 82       	std	Z+1, r15	; 0x01
     bd2:	e0 82       	st	Z, r14
     bd4:	13 86       	std	Z+11, r1	; 0x0b
     bd6:	12 86       	std	Z+10, r1	; 0x0a
     bd8:	13 e8       	ldi	r17, 0x83	; 131
     bda:	16 83       	std	Z+6, r17	; 0x06
     bdc:	82 83       	std	Z+2, r24	; 0x02
     bde:	93 83       	std	Z+3, r25	; 0x03
     be0:	a4 83       	std	Z+4, r26	; 0x04
     be2:	b5 83       	std	Z+5, r27	; 0x05
     be4:	17 82       	std	Z+7, r1	; 0x07
     be6:	89 ef       	ldi	r24, 0xF9	; 249
     be8:	90 e0       	ldi	r25, 0x00	; 0
     bea:	91 87       	std	Z+9, r25	; 0x09
     bec:	80 87       	std	Z+8, r24	; 0x08
     bee:	15 86       	std	Z+13, r1	; 0x0d
     bf0:	14 86       	std	Z+12, r1	; 0x0c
     bf2:	bf 01       	movw	r22, r30
     bf4:	87 e2       	ldi	r24, 0x27	; 39
     bf6:	94 e0       	ldi	r25, 0x04	; 4
     bf8:	0e 94 30 05 	call	0xa60	; 0xa60 <_Z12addAttributeP11rawPropertyP12rawAttribute>
     bfc:	80 e7       	ldi	r24, 0x70	; 112
     bfe:	91 e0       	ldi	r25, 0x01	; 1
     c00:	90 93 ea 03 	sts	0x03EA, r25	; 0x8003ea <_ZZN10__autoCallC4EvE1p_0+0x1>
     c04:	80 93 e9 03 	sts	0x03E9, r24	; 0x8003e9 <_ZZN10__autoCallC4EvE1p_0>
     c08:	eb ed       	ldi	r30, 0xDB	; 219
     c0a:	f3 e0       	ldi	r31, 0x03	; 3
     c0c:	d1 83       	std	Z+1, r29	; 0x01
     c0e:	c0 83       	st	Z, r28
     c10:	13 86       	std	Z+11, r1	; 0x0b
     c12:	12 86       	std	Z+10, r1	; 0x0a
     c14:	96 82       	std	Z+6, r9	; 0x06
     c16:	12 82       	std	Z+2, r1	; 0x02
     c18:	13 82       	std	Z+3, r1	; 0x03
     c1a:	14 82       	std	Z+4, r1	; 0x04
     c1c:	15 82       	std	Z+5, r1	; 0x05
     c1e:	17 82       	std	Z+7, r1	; 0x07
     c20:	89 ef       	ldi	r24, 0xF9	; 249
     c22:	90 e0       	ldi	r25, 0x00	; 0
     c24:	91 87       	std	Z+9, r25	; 0x09
     c26:	80 87       	std	Z+8, r24	; 0x08
     c28:	15 86       	std	Z+13, r1	; 0x0d
     c2a:	14 86       	std	Z+12, r1	; 0x0c
     c2c:	bf 01       	movw	r22, r30
     c2e:	89 ee       	ldi	r24, 0xE9	; 233
     c30:	93 e0       	ldi	r25, 0x03	; 3
     c32:	0e 94 30 05 	call	0xa60	; 0xa60 <_Z12addAttributeP11rawPropertyP12rawAttribute>
     c36:	ed ec       	ldi	r30, 0xCD	; 205
     c38:	f3 e0       	ldi	r31, 0x03	; 3
     c3a:	b1 82       	std	Z+1, r11	; 0x01
     c3c:	a0 82       	st	Z, r10
     c3e:	13 86       	std	Z+11, r1	; 0x0b
     c40:	12 86       	std	Z+10, r1	; 0x0a
     c42:	06 83       	std	Z+6, r16	; 0x06
     c44:	12 82       	std	Z+2, r1	; 0x02
     c46:	13 82       	std	Z+3, r1	; 0x03
     c48:	14 82       	std	Z+4, r1	; 0x04
     c4a:	15 82       	std	Z+5, r1	; 0x05
     c4c:	17 82       	std	Z+7, r1	; 0x07
     c4e:	89 ef       	ldi	r24, 0xF9	; 249
     c50:	90 e0       	ldi	r25, 0x00	; 0
     c52:	91 87       	std	Z+9, r25	; 0x09
     c54:	80 87       	std	Z+8, r24	; 0x08
     c56:	15 86       	std	Z+13, r1	; 0x0d
     c58:	14 86       	std	Z+12, r1	; 0x0c
     c5a:	bf 01       	movw	r22, r30
     c5c:	89 ee       	ldi	r24, 0xE9	; 233
     c5e:	93 e0       	ldi	r25, 0x03	; 3
     c60:	0e 94 30 05 	call	0xa60	; 0xa60 <_Z12addAttributeP11rawPropertyP12rawAttribute>
     c64:	ef eb       	ldi	r30, 0xBF	; 191
     c66:	f3 e0       	ldi	r31, 0x03	; 3
     c68:	d1 82       	std	Z+1, r13	; 0x01
     c6a:	c0 82       	st	Z, r12
     c6c:	13 86       	std	Z+11, r1	; 0x0b
     c6e:	12 86       	std	Z+10, r1	; 0x0a
     c70:	06 83       	std	Z+6, r16	; 0x06
     c72:	42 82       	std	Z+2, r4	; 0x02
     c74:	53 82       	std	Z+3, r5	; 0x03
     c76:	64 82       	std	Z+4, r6	; 0x04
     c78:	75 82       	std	Z+5, r7	; 0x05
     c7a:	17 82       	std	Z+7, r1	; 0x07
     c7c:	89 ef       	ldi	r24, 0xF9	; 249
     c7e:	90 e0       	ldi	r25, 0x00	; 0
     c80:	91 87       	std	Z+9, r25	; 0x09
     c82:	80 87       	std	Z+8, r24	; 0x08
     c84:	15 86       	std	Z+13, r1	; 0x0d
     c86:	14 86       	std	Z+12, r1	; 0x0c
     c88:	bf 01       	movw	r22, r30
     c8a:	89 ee       	ldi	r24, 0xE9	; 233
     c8c:	93 e0       	ldi	r25, 0x03	; 3
     c8e:	0e 94 30 05 	call	0xa60	; 0xa60 <_Z12addAttributeP11rawPropertyP12rawAttribute>
     c92:	80 e0       	ldi	r24, 0x00	; 0
     c94:	90 e0       	ldi	r25, 0x00	; 0
     c96:	dc 01       	movw	r26, r24
     c98:	84 e6       	ldi	r24, 0x64	; 100
     c9a:	91 e0       	ldi	r25, 0x01	; 1
     c9c:	e1 eb       	ldi	r30, 0xB1	; 177
     c9e:	f3 e0       	ldi	r31, 0x03	; 3
     ca0:	f1 82       	std	Z+1, r15	; 0x01
     ca2:	e0 82       	st	Z, r14
     ca4:	13 86       	std	Z+11, r1	; 0x0b
     ca6:	12 86       	std	Z+10, r1	; 0x0a
     ca8:	16 83       	std	Z+6, r17	; 0x06
     caa:	82 83       	std	Z+2, r24	; 0x02
     cac:	93 83       	std	Z+3, r25	; 0x03
     cae:	a4 83       	std	Z+4, r26	; 0x04
     cb0:	b5 83       	std	Z+5, r27	; 0x05
     cb2:	17 82       	std	Z+7, r1	; 0x07
     cb4:	89 ef       	ldi	r24, 0xF9	; 249
     cb6:	90 e0       	ldi	r25, 0x00	; 0
     cb8:	91 87       	std	Z+9, r25	; 0x09
     cba:	80 87       	std	Z+8, r24	; 0x08
     cbc:	15 86       	std	Z+13, r1	; 0x0d
     cbe:	14 86       	std	Z+12, r1	; 0x0c
     cc0:	bf 01       	movw	r22, r30
     cc2:	89 ee       	ldi	r24, 0xE9	; 233
     cc4:	93 e0       	ldi	r25, 0x03	; 3
     cc6:	0e 94 30 05 	call	0xa60	; 0xa60 <_Z12addAttributeP11rawPropertyP12rawAttribute>
     cca:	8f e7       	ldi	r24, 0x7F	; 127
     ccc:	91 e0       	ldi	r25, 0x01	; 1
     cce:	90 93 ac 03 	sts	0x03AC, r25	; 0x8003ac <_ZZN10__autoCallC4EvE1p_1+0x1>
     cd2:	80 93 ab 03 	sts	0x03AB, r24	; 0x8003ab <_ZZN10__autoCallC4EvE1p_1>
     cd6:	ed e9       	ldi	r30, 0x9D	; 157
     cd8:	f3 e0       	ldi	r31, 0x03	; 3
     cda:	d1 83       	std	Z+1, r29	; 0x01
     cdc:	c0 83       	st	Z, r28
     cde:	13 86       	std	Z+11, r1	; 0x0b
     ce0:	12 86       	std	Z+10, r1	; 0x0a
     ce2:	82 e0       	ldi	r24, 0x02	; 2
     ce4:	86 83       	std	Z+6, r24	; 0x06
     ce6:	12 82       	std	Z+2, r1	; 0x02
     ce8:	13 82       	std	Z+3, r1	; 0x03
     cea:	14 82       	std	Z+4, r1	; 0x04
     cec:	15 82       	std	Z+5, r1	; 0x05
     cee:	83 e0       	ldi	r24, 0x03	; 3
     cf0:	87 83       	std	Z+7, r24	; 0x07
     cf2:	83 ef       	ldi	r24, 0xF3	; 243
     cf4:	90 e0       	ldi	r25, 0x00	; 0
     cf6:	91 87       	std	Z+9, r25	; 0x09
     cf8:	80 87       	std	Z+8, r24	; 0x08
     cfa:	15 86       	std	Z+13, r1	; 0x0d
     cfc:	14 86       	std	Z+12, r1	; 0x0c
     cfe:	bf 01       	movw	r22, r30
     d00:	8b ea       	ldi	r24, 0xAB	; 171
     d02:	93 e0       	ldi	r25, 0x03	; 3
     d04:	df 91       	pop	r29
     d06:	cf 91       	pop	r28
     d08:	1f 91       	pop	r17
     d0a:	0f 91       	pop	r16
     d0c:	ff 90       	pop	r15
     d0e:	ef 90       	pop	r14
     d10:	df 90       	pop	r13
     d12:	cf 90       	pop	r12
     d14:	bf 90       	pop	r11
     d16:	af 90       	pop	r10
     d18:	9f 90       	pop	r9
     d1a:	7f 90       	pop	r7
     d1c:	6f 90       	pop	r6
     d1e:	5f 90       	pop	r5
     d20:	4f 90       	pop	r4
     d22:	0c 94 30 05 	jmp	0xa60	; 0xa60 <_Z12addAttributeP11rawPropertyP12rawAttribute>

00000d26 <main>:

void setupUSB() __attribute__((weak));
void setupUSB() { }

int main(void)
{
     d26:	cf 93       	push	r28
     d28:	df 93       	push	r29
     d2a:	cd b7       	in	r28, 0x3d	; 61
     d2c:	de b7       	in	r29, 0x3e	; 62
     d2e:	a5 97       	sbiw	r28, 0x25	; 37
     d30:	0f b6       	in	r0, 0x3f	; 63
     d32:	f8 94       	cli
     d34:	de bf       	out	0x3e, r29	; 62
     d36:	0f be       	out	0x3f, r0	; 63
     d38:	cd bf       	out	0x3d, r28	; 61

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
     d3a:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
     d3c:	84 b5       	in	r24, 0x24	; 36
     d3e:	82 60       	ori	r24, 0x02	; 2
     d40:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
     d42:	84 b5       	in	r24, 0x24	; 36
     d44:	81 60       	ori	r24, 0x01	; 1
     d46:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
     d48:	85 b5       	in	r24, 0x25	; 37
     d4a:	82 60       	ori	r24, 0x02	; 2
     d4c:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
     d4e:	85 b5       	in	r24, 0x25	; 37
     d50:	81 60       	ori	r24, 0x01	; 1
     d52:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
     d54:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <__DATA_REGION_ORIGIN__+0xe>
     d58:	81 60       	ori	r24, 0x01	; 1
     d5a:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__DATA_REGION_ORIGIN__+0xe>
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
     d5e:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__DATA_REGION_ORIGIN__+0x21>

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
     d62:	80 91 81 00 	lds	r24, 0x0081	; 0x800081 <__DATA_REGION_ORIGIN__+0x21>
     d66:	82 60       	ori	r24, 0x02	; 2
     d68:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__DATA_REGION_ORIGIN__+0x21>
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
     d6c:	80 91 81 00 	lds	r24, 0x0081	; 0x800081 <__DATA_REGION_ORIGIN__+0x21>
     d70:	81 60       	ori	r24, 0x01	; 1
     d72:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__DATA_REGION_ORIGIN__+0x21>
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
     d76:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
     d7a:	81 60       	ori	r24, 0x01	; 1
     d7c:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
     d80:	80 91 b1 00 	lds	r24, 0x00B1	; 0x8000b1 <__DATA_REGION_ORIGIN__+0x51>
     d84:	84 60       	ori	r24, 0x04	; 4
     d86:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__DATA_REGION_ORIGIN__+0x51>

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
     d8a:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__DATA_REGION_ORIGIN__+0x50>
     d8e:	81 60       	ori	r24, 0x01	; 1
     d90:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__DATA_REGION_ORIGIN__+0x50>
#endif

#if defined(ADCSRA)
	// set a2d prescaler so we are inside the desired 50-200 KHz range.
	#if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
		sbi(ADCSRA, ADPS2);
     d94:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
     d98:	84 60       	ori	r24, 0x04	; 4
     d9a:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
		sbi(ADCSRA, ADPS1);
     d9e:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
     da2:	82 60       	ori	r24, 0x02	; 2
     da4:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
		sbi(ADCSRA, ADPS0);
     da8:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
     dac:	81 60       	ori	r24, 0x01	; 1
     dae:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
		cbi(ADCSRA, ADPS2);
		cbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#endif
	// enable a2d conversions
	sbi(ADCSRA, ADEN);
     db2:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
     db6:	80 68       	ori	r24, 0x80	; 128
     db8:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
     dbc:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__DATA_REGION_ORIGIN__+0x61>

void HardwareSerial::begin(unsigned long baud, byte config)
{
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
  *_ucsra = 1 << U2X0;
     dc0:	e0 91 10 03 	lds	r30, 0x0310	; 0x800310 <Serial+0x10>
     dc4:	f0 91 11 03 	lds	r31, 0x0311	; 0x800311 <Serial+0x11>
     dc8:	82 e0       	ldi	r24, 0x02	; 2
     dca:	80 83       	st	Z, r24
    *_ucsra = 0;
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
  }

  // assign the baud_setting, a.k.a. ubrr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
     dcc:	e0 91 0c 03 	lds	r30, 0x030C	; 0x80030c <Serial+0xc>
     dd0:	f0 91 0d 03 	lds	r31, 0x030D	; 0x80030d <Serial+0xd>
     dd4:	10 82       	st	Z, r1
  *_ubrrl = baud_setting;
     dd6:	e0 91 0e 03 	lds	r30, 0x030E	; 0x80030e <Serial+0xe>
     dda:	f0 91 0f 03 	lds	r31, 0x030F	; 0x80030f <Serial+0xf>
     dde:	8f ec       	ldi	r24, 0xCF	; 207
     de0:	80 83       	st	Z, r24

  _written = false;
     de2:	10 92 18 03 	sts	0x0318, r1	; 0x800318 <Serial+0x18>

  //set the data bits, parity, and stop bits
#if defined(__AVR_ATmega8__)
  config |= 0x80; // select UCSRC register (shared with UBRRH)
#endif
  *_ucsrc = config;
     de6:	e0 91 14 03 	lds	r30, 0x0314	; 0x800314 <Serial+0x14>
     dea:	f0 91 15 03 	lds	r31, 0x0315	; 0x800315 <Serial+0x15>
     dee:	86 e0       	ldi	r24, 0x06	; 6
     df0:	80 83       	st	Z, r24
  
  sbi(*_ucsrb, RXEN0);
     df2:	e0 91 12 03 	lds	r30, 0x0312	; 0x800312 <Serial+0x12>
     df6:	f0 91 13 03 	lds	r31, 0x0313	; 0x800313 <Serial+0x13>
     dfa:	80 81       	ld	r24, Z
     dfc:	80 61       	ori	r24, 0x10	; 16
     dfe:	80 83       	st	Z, r24
  sbi(*_ucsrb, TXEN0);
     e00:	e0 91 12 03 	lds	r30, 0x0312	; 0x800312 <Serial+0x12>
     e04:	f0 91 13 03 	lds	r31, 0x0313	; 0x800313 <Serial+0x13>
     e08:	80 81       	ld	r24, Z
     e0a:	88 60       	ori	r24, 0x08	; 8
     e0c:	80 83       	st	Z, r24
  sbi(*_ucsrb, RXCIE0);
     e0e:	e0 91 12 03 	lds	r30, 0x0312	; 0x800312 <Serial+0x12>
     e12:	f0 91 13 03 	lds	r31, 0x0313	; 0x800313 <Serial+0x13>
     e16:	80 81       	ld	r24, Z
     e18:	80 68       	ori	r24, 0x80	; 128
     e1a:	80 83       	st	Z, r24
  cbi(*_ucsrb, UDRIE0);
     e1c:	e0 91 12 03 	lds	r30, 0x0312	; 0x800312 <Serial+0x12>
     e20:	f0 91 13 03 	lds	r31, 0x0313	; 0x800313 <Serial+0x13>
     e24:	80 81       	ld	r24, Z
     e26:	8f 7d       	andi	r24, 0xDF	; 223
     e28:	80 83       	st	Z, r24
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
	uint8_t bit = digitalPinToBitMask(pin);
     e2a:	e8 ed       	ldi	r30, 0xD8	; 216
     e2c:	f0 e0       	ldi	r31, 0x00	; 0
     e2e:	24 91       	lpm	r18, Z
	uint8_t port = digitalPinToPort(pin);
     e30:	e4 ec       	ldi	r30, 0xC4	; 196
     e32:	f0 e0       	ldi	r31, 0x00	; 0
     e34:	84 91       	lpm	r24, Z
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
     e36:	88 23       	and	r24, r24
     e38:	99 f0       	breq	.+38     	; 0xe60 <main+0x13a>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
     e3a:	90 e0       	ldi	r25, 0x00	; 0
     e3c:	88 0f       	add	r24, r24
     e3e:	99 1f       	adc	r25, r25
     e40:	fc 01       	movw	r30, r24
     e42:	ed 55       	subi	r30, 0x5D	; 93
     e44:	ff 4f       	sbci	r31, 0xFF	; 255
     e46:	a5 91       	lpm	r26, Z+
     e48:	b4 91       	lpm	r27, Z
	out = portOutputRegister(port);
     e4a:	fc 01       	movw	r30, r24
     e4c:	e3 55       	subi	r30, 0x53	; 83
     e4e:	ff 4f       	sbci	r31, 0xFF	; 255
     e50:	85 91       	lpm	r24, Z+
     e52:	94 91       	lpm	r25, Z
                cli();
		*reg &= ~bit;
		*out |= bit;
		SREG = oldSREG;
	} else {
		uint8_t oldSREG = SREG;
     e54:	8f b7       	in	r24, 0x3f	; 63
                cli();
     e56:	f8 94       	cli
		*reg |= bit;
     e58:	ec 91       	ld	r30, X
     e5a:	e2 2b       	or	r30, r18
     e5c:	ec 93       	st	X, r30
		SREG = oldSREG;
     e5e:	8f bf       	out	0x3f, r24	; 63
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
     e60:	60 e0       	ldi	r22, 0x00	; 0
     e62:	66 2e       	mov	r6, r22
     e64:	60 e0       	ldi	r22, 0x00	; 0
     e66:	76 2e       	mov	r7, r22
			}
		}

		// everything is ok, call message handler
		Request msg( cState.parts );
		Response rsp( stream, cState.parts[4] ? true : false );
     e68:	55 24       	eor	r5, r5
     e6a:	53 94       	inc	r5
	if( cState.pos == 0 ) {
		cState.state = 0;
		cState.time = now;
		cState.crc = 0;
		cState.error = false;
		cState.parts[0] = cState.buf;
     e6c:	79 e6       	ldi	r23, 0x69	; 105
     e6e:	a7 2e       	mov	r10, r23
     e70:	72 e0       	ldi	r23, 0x02	; 2
     e72:	b7 2e       	mov	r11, r23
}

unsigned long millis()
{
	unsigned long m;
	uint8_t oldSREG = SREG;
     e74:	8f b7       	in	r24, 0x3f	; 63

	// disable interrupts while we read timer0_millis or we might get an
	// inconsistent value (e.g. in the middle of a write to timer0_millis)
	cli();
     e76:	f8 94       	cli
	m = timer0_millis;
     e78:	c0 90 51 02 	lds	r12, 0x0251	; 0x800251 <timer0_millis>
     e7c:	d0 90 52 02 	lds	r13, 0x0252	; 0x800252 <timer0_millis+0x1>
     e80:	e0 90 53 02 	lds	r14, 0x0253	; 0x800253 <timer0_millis+0x2>
     e84:	f0 90 54 02 	lds	r15, 0x0254	; 0x800254 <timer0_millis+0x3>
	SREG = oldSREG;
     e88:	8f bf       	out	0x3f, r24	; 63

void processMessages( Stream* stream, pfnMsgHandler handler ) {

	long now = millis();

	int input = stream->read();
     e8a:	80 e0       	ldi	r24, 0x00	; 0
     e8c:	93 e0       	ldi	r25, 0x03	; 3
     e8e:	0e 94 2c 01 	call	0x258	; 0x258 <_ZN14HardwareSerial4readEv>
     e92:	20 91 55 02 	lds	r18, 0x0255	; 0x800255 <cState>
     e96:	30 91 56 02 	lds	r19, 0x0256	; 0x800256 <cState+0x1>
	if( input < 0 ) {
     e9a:	97 ff       	sbrs	r25, 7
     e9c:	24 c0       	rjmp	.+72     	; 0xee6 <main+0x1c0>
		if( cState.pos && ( now - cState.time ) > PROTOCOL_TIMEOUT_MS ) {
     e9e:	23 2b       	or	r18, r19
     ea0:	c1 f0       	breq	.+48     	; 0xed2 <main+0x1ac>
     ea2:	80 91 57 02 	lds	r24, 0x0257	; 0x800257 <cState+0x2>
     ea6:	90 91 58 02 	lds	r25, 0x0258	; 0x800258 <cState+0x3>
     eaa:	a0 91 59 02 	lds	r26, 0x0259	; 0x800259 <cState+0x4>
     eae:	b0 91 5a 02 	lds	r27, 0x025A	; 0x80025a <cState+0x5>
     eb2:	c8 1a       	sub	r12, r24
     eb4:	d9 0a       	sbc	r13, r25
     eb6:	ea 0a       	sbc	r14, r26
     eb8:	fb 0a       	sbc	r15, r27
			// error: restart
			comError( stream, "C01", "TIMEOUT" );
     eba:	6f e8       	ldi	r22, 0x8F	; 143
     ebc:	71 e0       	ldi	r23, 0x01	; 1
     ebe:	87 e9       	ldi	r24, 0x97	; 151
     ec0:	91 e0       	ldi	r25, 0x01	; 1

	long now = millis();

	int input = stream->read();
	if( input < 0 ) {
		if( cState.pos && ( now - cState.time ) > PROTOCOL_TIMEOUT_MS ) {
     ec2:	29 ee       	ldi	r18, 0xE9	; 233
     ec4:	c2 16       	cp	r12, r18
     ec6:	23 e0       	ldi	r18, 0x03	; 3
     ec8:	d2 06       	cpc	r13, r18
     eca:	e1 04       	cpc	r14, r1
     ecc:	f1 04       	cpc	r15, r1
     ece:	0c f0       	brlt	.+2      	; 0xed2 <main+0x1ac>
     ed0:	cd c1       	rjmp	.+922    	; 0x126c <main+0x546>
     ed2:	61 14       	cp	r6, r1
     ed4:	71 04       	cpc	r7, r1
     ed6:	71 f2       	breq	.-100    	; 0xe74 <main+0x14e>
     ed8:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <_Z17Serial0_availablev>
     edc:	88 23       	and	r24, r24
     ede:	51 f2       	breq	.-108    	; 0xe74 <main+0x14e>
     ee0:	0e 94 00 00 	call	0	; 0x0 <__vectors>
     ee4:	c7 cf       	rjmp	.-114    	; 0xe74 <main+0x14e>

		return;
	}

	// read next input
	byte ch = (byte)input;
     ee6:	68 2f       	mov	r22, r24

	// init cState
	if( cState.pos == 0 ) {
     ee8:	21 15       	cp	r18, r1
     eea:	31 05       	cpc	r19, r1
     eec:	09 f0       	breq	.+2      	; 0xef0 <main+0x1ca>
     eee:	b2 c1       	rjmp	.+868    	; 0x1254 <main+0x52e>
		cState.state = 0;
     ef0:	10 92 5e 02 	sts	0x025E, r1	; 0x80025e <cState+0x9>
     ef4:	10 92 5d 02 	sts	0x025D, r1	; 0x80025d <cState+0x8>
		cState.time = now;
     ef8:	c0 92 57 02 	sts	0x0257, r12	; 0x800257 <cState+0x2>
     efc:	d0 92 58 02 	sts	0x0258, r13	; 0x800258 <cState+0x3>
     f00:	e0 92 59 02 	sts	0x0259, r14	; 0x800259 <cState+0x4>
     f04:	f0 92 5a 02 	sts	0x025A, r15	; 0x80025a <cState+0x5>
		cState.crc = 0;
     f08:	10 92 5b 02 	sts	0x025B, r1	; 0x80025b <cState+0x6>
		cState.error = false;
     f0c:	10 92 5c 02 	sts	0x025C, r1	; 0x80025c <cState+0x7>
		cState.parts[0] = cState.buf;
     f10:	b0 92 60 02 	sts	0x0260, r11	; 0x800260 <cState+0xb>
     f14:	a0 92 5f 02 	sts	0x025F, r10	; 0x80025f <cState+0xa>
		cState.parts[1] = NULL;
     f18:	10 92 62 02 	sts	0x0262, r1	; 0x800262 <cState+0xd>
     f1c:	10 92 61 02 	sts	0x0261, r1	; 0x800261 <cState+0xc>
		cState.parts[2] = NULL;
     f20:	10 92 64 02 	sts	0x0264, r1	; 0x800264 <cState+0xf>
     f24:	10 92 63 02 	sts	0x0263, r1	; 0x800263 <cState+0xe>
		cState.parts[3] = NULL;
     f28:	10 92 66 02 	sts	0x0266, r1	; 0x800266 <cState+0x11>
     f2c:	10 92 65 02 	sts	0x0265, r1	; 0x800265 <cState+0x10>
		cState.parts[4] = NULL;
     f30:	10 92 68 02 	sts	0x0268, r1	; 0x800268 <cState+0x13>
     f34:	10 92 67 02 	sts	0x0267, r1	; 0x800267 <cState+0x12>
	}

	// finite state machine

	// end of transmission
	if( ch == PROTOCOL_EOT ) {
     f38:	8a 30       	cpi	r24, 0x0A	; 10
     f3a:	59 f2       	breq	.-106    	; 0xed2 <main+0x1ac>
		cState.pos = 0;
		return;
	}

	// we are in error, just wait EOT
	if( cState.error ) {
     f3c:	40 91 5c 02 	lds	r20, 0x025C	; 0x80025c <cState+0x7>
     f40:	41 11       	cpse	r20, r1
     f42:	c7 cf       	rjmp	.-114    	; 0xed2 <main+0x1ac>
		return;
	}

	if( cState.state <= 4 ) {
     f44:	40 91 5d 02 	lds	r20, 0x025D	; 0x80025d <cState+0x8>
     f48:	50 91 5e 02 	lds	r21, 0x025E	; 0x80025e <cState+0x9>
     f4c:	45 30       	cpi	r20, 0x05	; 5
     f4e:	51 05       	cpc	r21, r1
     f50:	54 f4       	brge	.+20     	; 0xf66 <main+0x240>
		// on a separator, skip to next part
		if( ch == PROTOCOL_SEPARATOR ) {
     f52:	6b 33       	cpi	r22, 0x3B	; 59
     f54:	09 f0       	breq	.+2      	; 0xf58 <main+0x232>
     f56:	4d c1       	rjmp	.+666    	; 0x11f2 <main+0x4cc>
			// in checksum ?
			if( cState.parts[4] ) {
     f58:	60 91 67 02 	lds	r22, 0x0267	; 0x800267 <cState+0x12>
     f5c:	70 91 68 02 	lds	r23, 0x0268	; 0x800268 <cState+0x13>
     f60:	67 2b       	or	r22, r23
     f62:	09 f4       	brne	.+2      	; 0xf66 <main+0x240>
     f64:	25 c1       	rjmp	.+586    	; 0x11b0 <main+0x48a>
				cState.error = true;
     f66:	50 92 5c 02 	sts	0x025C, r5	; 0x80025c <cState+0x7>
     f6a:	b3 cf       	rjmp	.-154    	; 0xed2 <main+0x1ac>
			comError( stream, "C04", "OVERFLOW" );
			return;
		}

		// close it
		cState.buf[cState.pos] = 0;
     f6c:	2b 5a       	subi	r18, 0xAB	; 171
     f6e:	3d 4f       	sbci	r19, 0xFD	; 253
     f70:	d9 01       	movw	r26, r18
     f72:	54 96       	adiw	r26, 0x14	; 20
     f74:	1c 92       	st	X, r1
		//printf( "[TRACE] cmd: %s, prop: %s, v1: %s, v2: %s\n", cState.parts[0], cState.parts[1], cState.parts[2], cState.parts[3] );
		printf( "> %s;%s;%s;%s\n", cState.parts[0], cState.parts[1], cState.parts[2], cState.parts[3] );
#endif

		// we must have at least command + property, command cannot be empty
		if( cState.state < 2 || *cState.parts[0] == 0 ) {
     f76:	80 91 5d 02 	lds	r24, 0x025D	; 0x80025d <cState+0x8>
     f7a:	90 91 5e 02 	lds	r25, 0x025E	; 0x80025e <cState+0x9>
     f7e:	02 97       	sbiw	r24, 0x02	; 2
     f80:	44 f0       	brlt	.+16     	; 0xf92 <main+0x26c>
     f82:	80 90 5f 02 	lds	r8, 0x025F	; 0x80025f <cState+0xa>
     f86:	90 90 60 02 	lds	r9, 0x0260	; 0x800260 <cState+0xb>
     f8a:	f4 01       	movw	r30, r8
     f8c:	80 81       	ld	r24, Z
     f8e:	81 11       	cpse	r24, r1
     f90:	05 c0       	rjmp	.+10     	; 0xf9c <main+0x276>
			comError( stream, "C02", "BAD REQUEST" );
     f92:	68 ea       	ldi	r22, 0xA8	; 168
     f94:	71 e0       	ldi	r23, 0x01	; 1
     f96:	84 eb       	ldi	r24, 0xB4	; 180
     f98:	91 e0       	ldi	r25, 0x01	; 1
     f9a:	68 c1       	rjmp	.+720    	; 0x126c <main+0x546>
			return;
		}

		// do we have a checksum ?
		if( cState.parts[4] ) {
     f9c:	e0 91 67 02 	lds	r30, 0x0267	; 0x800267 <cState+0x12>
     fa0:	f0 91 68 02 	lds	r31, 0x0268	; 0x800268 <cState+0x13>
     fa4:	30 97       	sbiw	r30, 0x00	; 0
     fa6:	d9 f0       	breq	.+54     	; 0xfde <main+0x2b8>
			const char* checksum = cState.parts[4];
			if( checksum[0] != xtoa( ( cState.crc & 0xf0 ) >> 4 ) || checksum[1] != xtoa( cState.crc & 0xf ) ) {
     fa8:	20 81       	ld	r18, Z
     faa:	80 91 5b 02 	lds	r24, 0x025B	; 0x80025b <cState+0x6>
     fae:	98 2f       	mov	r25, r24
     fb0:	92 95       	swap	r25
     fb2:	9f 70       	andi	r25, 0x0F	; 15
     fb4:	9a 30       	cpi	r25, 0x0A	; 10
     fb6:	78 f4       	brcc	.+30     	; 0xfd6 <main+0x2b0>
     fb8:	90 5d       	subi	r25, 0xD0	; 208
     fba:	29 13       	cpse	r18, r25
     fbc:	07 c0       	rjmp	.+14     	; 0xfcc <main+0x2a6>
     fbe:	91 81       	ldd	r25, Z+1	; 0x01
     fc0:	8f 70       	andi	r24, 0x0F	; 15
     fc2:	8a 30       	cpi	r24, 0x0A	; 10
     fc4:	50 f4       	brcc	.+20     	; 0xfda <main+0x2b4>
     fc6:	80 5d       	subi	r24, 0xD0	; 208
     fc8:	98 17       	cp	r25, r24
     fca:	49 f0       	breq	.+18     	; 0xfde <main+0x2b8>
				comError( stream, "C03", "BAD CHECKSUM" );
     fcc:	68 eb       	ldi	r22, 0xB8	; 184
     fce:	71 e0       	ldi	r23, 0x01	; 1
     fd0:	85 ec       	ldi	r24, 0xC5	; 197
     fd2:	91 e0       	ldi	r25, 0x01	; 1
     fd4:	4b c1       	rjmp	.+662    	; 0x126c <main+0x546>
     fd6:	99 5c       	subi	r25, 0xC9	; 201
     fd8:	f0 cf       	rjmp	.-32     	; 0xfba <main+0x294>
     fda:	89 5c       	subi	r24, 0xC9	; 201
     fdc:	f5 cf       	rjmp	.-22     	; 0xfc8 <main+0x2a2>

#include "protocol.h"

Request::Request( char* parts[5] ) {
	m_command = parts[0];
	m_property = parts[1] ? parts[1] : "";
     fde:	00 91 61 02 	lds	r16, 0x0261	; 0x800261 <cState+0xc>
     fe2:	10 91 62 02 	lds	r17, 0x0262	; 0x800262 <cState+0xd>
     fe6:	01 15       	cp	r16, r1
     fe8:	11 05       	cpc	r17, r1
     fea:	11 f4       	brne	.+4      	; 0xff0 <main+0x2ca>
     fec:	07 e4       	ldi	r16, 0x47	; 71
     fee:	11 e0       	ldi	r17, 0x01	; 1
	m_value1 = parts[2] ? parts[2] : "";
     ff0:	c0 90 63 02 	lds	r12, 0x0263	; 0x800263 <cState+0xe>
     ff4:	d0 90 64 02 	lds	r13, 0x0264	; 0x800264 <cState+0xf>
     ff8:	c1 14       	cp	r12, r1
     ffa:	d1 04       	cpc	r13, r1
     ffc:	21 f4       	brne	.+8      	; 0x1006 <main+0x2e0>
     ffe:	57 e4       	ldi	r21, 0x47	; 71
    1000:	c5 2e       	mov	r12, r21
    1002:	51 e0       	ldi	r21, 0x01	; 1
    1004:	d5 2e       	mov	r13, r21
	m_value2 = parts[3] ? parts[3] : "";
    1006:	e0 90 65 02 	lds	r14, 0x0265	; 0x800265 <cState+0x10>
    100a:	f0 90 66 02 	lds	r15, 0x0266	; 0x800266 <cState+0x11>
    100e:	e1 14       	cp	r14, r1
    1010:	f1 04       	cpc	r15, r1
    1012:	21 f4       	brne	.+8      	; 0x101c <main+0x2f6>
    1014:	47 e4       	ldi	r20, 0x47	; 71
    1016:	e4 2e       	mov	r14, r20
    1018:	41 e0       	ldi	r20, 0x01	; 1
    101a:	f4 2e       	mov	r15, r20
/**
 *
 */

Response::Response( Stream* stream, bool needCrc ) {
	m_inFrame = false;
    101c:	1a a2       	std	Y+34, r1	; 0x22
	m_crc = 0;
    101e:	19 a2       	std	Y+33, r1	; 0x21
	m_stream = stream;
    1020:	80 e0       	ldi	r24, 0x00	; 0
    1022:	93 e0       	ldi	r25, 0x03	; 3
    1024:	9c a3       	std	Y+36, r25	; 0x24
    1026:	8b a3       	std	Y+35, r24	; 0x23
			}
		}

		// everything is ok, call message handler
		Request msg( cState.parts );
		Response rsp( stream, cState.parts[4] ? true : false );
    1028:	81 e0       	ldi	r24, 0x01	; 1
    102a:	ef 2b       	or	r30, r31
    102c:	09 f4       	brne	.+2      	; 0x1030 <main+0x30a>
    102e:	80 e0       	ldi	r24, 0x00	; 0

Response::Response( Stream* stream, bool needCrc ) {
	m_inFrame = false;
	m_crc = 0;
	m_stream = stream;
	m_needCrc = needCrc;
    1030:	8d a3       	std	Y+37, r24	; 0x25

// handle messages received on the Usis protocol handler
void handleMessage( Request* req, Response* res ) {

	// just toggle the led
	digitalWrite(LED_BUILTIN, HIGH );
    1032:	81 e0       	ldi	r24, 0x01	; 1
    1034:	0e 94 a8 00 	call	0x150	; 0x150 <digitalWrite.constprop.12>
/**
 * check if the request is the one given
 */

bool Request::is( const char* cmd ) const {
	return _str_eq( m_command, cmd );
    1038:	69 ec       	ldi	r22, 0xC9	; 201
    103a:	71 e0       	ldi	r23, 0x01	; 1
    103c:	c4 01       	movw	r24, r8
    103e:	0e 94 4c 03 	call	0x698	; 0x698 <_str_eq>
 * 			1 in case of command not handled
 */

int processProperty( Request* req, Response* res ) {

	if( req->is( "GET" ) ) {
    1042:	88 23       	and	r24, r24
    1044:	f1 f0       	breq	.+60     	; 0x1082 <main+0x35c>
/**
 * handle GET command
 */

int processPropertyGet( Request* req, Response* res ) {
	rawProperty* prop = findProperty( req->getProperty() );
    1046:	c8 01       	movw	r24, r16
    1048:	0e 94 64 03 	call	0x6c8	; 0x6c8 <_Z12findPropertyPKc>
    104c:	7c 01       	movw	r14, r24
	if( !prop ) {
    104e:	00 97       	sbiw	r24, 0x00	; 0
    1050:	19 f4       	brne	.+6      	; 0x1058 <main+0x332>
int processPropertySet( Request* req, Response* res ) {

	// get property
	rawProperty* prop = findProperty( req->getProperty() );
	if( !prop ) {
		res->sendError( "M01", "UNKNOWN PROPERTY" );
    1052:	4d ec       	ldi	r20, 0xCD	; 205
    1054:	51 e0       	ldi	r21, 0x01	; 1
    1056:	1e c0       	rjmp	.+60     	; 0x1094 <main+0x36e>
 * 	rawPropertyAttr* attr = findAttr( prop, "MIN" );
 */

rawAttribute* findAttr( rawProperty* prop, cstr attrName ) {

	rawAttribute* pa = prop->attrs;
    1058:	dc 01       	movw	r26, r24
    105a:	12 96       	adiw	r26, 0x02	; 2
    105c:	0d 91       	ld	r16, X+
    105e:	1c 91       	ld	r17, X
	while( pa ) {
    1060:	01 15       	cp	r16, r1
    1062:	11 05       	cpc	r17, r1
    1064:	09 f4       	brne	.+2      	; 0x1068 <main+0x342>
    1066:	28 c1       	rjmp	.+592    	; 0x12b8 <main+0x592>
		if( _str_eq(pa->name,attrName) ) {
    1068:	b6 01       	movw	r22, r12
    106a:	f8 01       	movw	r30, r16
    106c:	80 81       	ld	r24, Z
    106e:	91 81       	ldd	r25, Z+1	; 0x01
    1070:	0e 94 4c 03 	call	0x698	; 0x698 <_str_eq>
    1074:	81 11       	cpse	r24, r1
    1076:	fd c0       	rjmp	.+506    	; 0x1272 <main+0x54c>
			return pa;
		}

		pa = pa->next;
    1078:	d8 01       	movw	r26, r16
    107a:	1c 96       	adiw	r26, 0x0c	; 12
    107c:	0d 91       	ld	r16, X+
    107e:	1c 91       	ld	r17, X
    1080:	ef cf       	rjmp	.-34     	; 0x1060 <main+0x33a>
    1082:	62 ee       	ldi	r22, 0xE2	; 226
    1084:	71 e0       	ldi	r23, 0x01	; 1
    1086:	c4 01       	movw	r24, r8
    1088:	0e 94 4c 03 	call	0x698	; 0x698 <_str_eq>
int processProperty( Request* req, Response* res ) {

	if( req->is( "GET" ) ) {
		return processPropertyGet( req, res );
	}
	else if( req->is( "SET" ) ) {
    108c:	81 11       	cpse	r24, r1
    108e:	10 c0       	rjmp	.+32     	; 0x10b0 <main+0x38a>

	if( processProperty( req, res )==1 ) {
		res->sendError( "M01", "UNKNOWN COMMAND" );
    1090:	46 ee       	ldi	r20, 0xE6	; 230
    1092:	51 e0       	ldi	r21, 0x01	; 1
    1094:	6e ed       	ldi	r22, 0xDE	; 222
    1096:	71 e0       	ldi	r23, 0x01	; 1
		}
	}

	switch( rc ) {
		case -1: {
			res->sendError( "M03", "READONLY" );
    1098:	ce 01       	movw	r24, r28
    109a:	81 96       	adiw	r24, 0x21	; 33
    109c:	0e 94 bc 03 	call	0x778	; 0x778 <_ZN8Response9sendErrorEPKcS1_>
	}

	digitalWrite(LED_BUILTIN, LOW );
    10a0:	80 e0       	ldi	r24, 0x00	; 0
    10a2:	0e 94 a8 00 	call	0x150	; 0x150 <digitalWrite.constprop.12>
		Response rsp( stream, cState.parts[4] ? true : false );

		handler( &msg, &rsp );

		// restart for a new sequence
		cState.pos = 0;
    10a6:	10 92 56 02 	sts	0x0256, r1	; 0x800256 <cState+0x1>
    10aa:	10 92 55 02 	sts	0x0255, r1	; 0x800255 <cState>
    10ae:	11 cf       	rjmp	.-478    	; 0xed2 <main+0x1ac>
 */

int processPropertySet( Request* req, Response* res ) {

	// get property
	rawProperty* prop = findProperty( req->getProperty() );
    10b0:	c8 01       	movw	r24, r16
    10b2:	0e 94 64 03 	call	0x6c8	; 0x6c8 <_Z12findPropertyPKc>
    10b6:	4c 01       	movw	r8, r24
	if( !prop ) {
    10b8:	00 97       	sbiw	r24, 0x00	; 0
    10ba:	59 f2       	breq	.-106    	; 0x1052 <main+0x32c>
 * 	rawPropertyAttr* attr = findAttr( prop, "MIN" );
 */

rawAttribute* findAttr( rawProperty* prop, cstr attrName ) {

	rawAttribute* pa = prop->attrs;
    10bc:	fc 01       	movw	r30, r24
    10be:	02 81       	ldd	r16, Z+2	; 0x02
    10c0:	13 81       	ldd	r17, Z+3	; 0x03
	while( pa ) {
    10c2:	01 15       	cp	r16, r1
    10c4:	11 05       	cpc	r17, r1
    10c6:	09 f4       	brne	.+2      	; 0x10ca <main+0x3a4>
    10c8:	f7 c0       	rjmp	.+494    	; 0x12b8 <main+0x592>
		if( _str_eq(pa->name,attrName) ) {
    10ca:	b6 01       	movw	r22, r12
    10cc:	d8 01       	movw	r26, r16
    10ce:	8d 91       	ld	r24, X+
    10d0:	9c 91       	ld	r25, X
    10d2:	0e 94 4c 03 	call	0x698	; 0x698 <_str_eq>
	if( !v ) {
		res->sendError( "M05", "NO VALUE GIVEN" );
		return -1;
	}

	switch( attr->value.attrs & PROPERTY_TYPE_MASK ) {
    10d6:	f8 01       	movw	r30, r16

rawAttribute* findAttr( rawProperty* prop, cstr attrName ) {

	rawAttribute* pa = prop->attrs;
	while( pa ) {
		if( _str_eq(pa->name,attrName) ) {
    10d8:	81 11       	cpse	r24, r1
    10da:	f3 c0       	rjmp	.+486    	; 0x12c2 <main+0x59c>
			return pa;
		}

		pa = pa->next;
    10dc:	04 85       	ldd	r16, Z+12	; 0x0c
    10de:	15 85       	ldd	r17, Z+13	; 0x0d
    10e0:	f0 cf       	rjmp	.-32     	; 0x10c2 <main+0x39c>
	}

	switch( attr->value.attrs & PROPERTY_TYPE_MASK ) {
		case PROPERTY_TYPE_INT: {
			// check all chars are digits
			if( !isValidNumber(v,false) ) {
    10e2:	60 e0       	ldi	r22, 0x00	; 0
    10e4:	c7 01       	movw	r24, r14
    10e6:	0e 94 fd 01 	call	0x3fa	; 0x3fa <_Z13isValidNumberPKcb>
    10ea:	88 23       	and	r24, r24
    10ec:	09 f4       	brne	.+2      	; 0x10f0 <main+0x3ca>
    10ee:	f7 c0       	rjmp	.+494    	; 0x12de <main+0x5b8>
/**
 * 
 */

int _str_to_i( const char* a ) {
	return atoi( a );
    10f0:	c7 01       	movw	r24, r14
    10f2:	0e 94 78 09 	call	0x12f0	; 0x12f0 <atoi>
 */

int set_variant( rawValue* var, int v ) {

	// check !readonly
	if( var->attrs & PROPERTY_FLAG_READONLY ) {
    10f6:	d7 fc       	sbrc	r13, 7
    10f8:	56 c0       	rjmp	.+172    	; 0x11a6 <main+0x480>

		return -2;
	}

	// ok, can set value
	var->ival = v;
    10fa:	d8 01       	movw	r26, r16
    10fc:	13 96       	adiw	r26, 0x03	; 3
    10fe:	9c 93       	st	X, r25
    1100:	8e 93       	st	-X, r24
    1102:	12 97       	sbiw	r26, 0x02	; 2
			res->sendError( "M04", "BAD VALUE TYPE" );
			return -1;
		}
	}

	if( attr->change ) {
    1104:	d8 01       	movw	r26, r16
    1106:	1a 96       	adiw	r26, 0x0a	; 10
    1108:	ed 91       	ld	r30, X+
    110a:	fc 91       	ld	r31, X
    110c:	78 01       	movw	r14, r16
    110e:	b2 e0       	ldi	r27, 0x02	; 2
    1110:	eb 0e       	add	r14, r27
    1112:	f1 1c       	adc	r15, r1
    1114:	30 97       	sbiw	r30, 0x00	; 0
    1116:	11 f0       	breq	.+4      	; 0x111c <main+0x3f6>
		attr->change( &attr->value );
    1118:	c7 01       	movw	r24, r14
    111a:	09 95       	icall
	}

	char buffer[32];
	res->send( prop->name, attr->name, calcPropState( attr->value.attrs ), valueToStr( &attr->value, buffer ) );
    111c:	be 01       	movw	r22, r28
    111e:	6f 5f       	subi	r22, 0xFF	; 255
    1120:	7f 4f       	sbci	r23, 0xFF	; 255
    1122:	c7 01       	movw	r24, r14
    1124:	0e 94 72 02 	call	0x4e4	; 0x4e4 <_Z10valueToStrP8rawValuePc>
    1128:	d8 01       	movw	r26, r16
    112a:	16 96       	adiw	r26, 0x06	; 6
    112c:	ec 91       	ld	r30, X
    112e:	e8 73       	andi	r30, 0x38	; 56
    1130:	e8 50       	subi	r30, 0x08	; 8
    1132:	2c e8       	ldi	r18, 0x8C	; 140
    1134:	31 e0       	ldi	r19, 0x01	; 1
    1136:	e9 31       	cpi	r30, 0x19	; 25
    1138:	38 f4       	brcc	.+14     	; 0x1148 <main+0x422>
    113a:	f0 e0       	ldi	r31, 0x00	; 0
    113c:	ee 0f       	add	r30, r30
    113e:	ff 1f       	adc	r31, r31
    1140:	e0 50       	subi	r30, 0x00	; 0
    1142:	ff 4f       	sbci	r31, 0xFF	; 255
    1144:	20 81       	ld	r18, Z
    1146:	31 81       	ldd	r19, Z+1	; 0x01
    1148:	f8 01       	movw	r30, r16
    114a:	40 81       	ld	r20, Z
    114c:	51 81       	ldd	r21, Z+1	; 0x01
    114e:	d4 01       	movw	r26, r8
    1150:	ab c0       	rjmp	.+342    	; 0x12a8 <main+0x582>
			rc = setAttr( attr, _str_to_i(v) );
			break;
		}

		case PROPERTY_TYPE_FLOAT: {
			if( !isValidNumber(v,true) ) {
    1152:	61 e0       	ldi	r22, 0x01	; 1
    1154:	c7 01       	movw	r24, r14
    1156:	0e 94 fd 01 	call	0x3fa	; 0x3fa <_Z13isValidNumberPKcb>
    115a:	88 23       	and	r24, r24
    115c:	09 f4       	brne	.+2      	; 0x1160 <main+0x43a>
    115e:	bf c0       	rjmp	.+382    	; 0x12de <main+0x5b8>
/**
 * 
 */

float _str_to_f( const char* a ) {
	return atof( a );
    1160:	c7 01       	movw	r24, r14
    1162:	0e 94 74 09 	call	0x12e8	; 0x12e8 <atof>
 */

int set_variant( rawValue* var, float v ) {

	// check !readonly
	if( var->attrs & PROPERTY_FLAG_READONLY ) {
    1166:	f8 01       	movw	r30, r16
    1168:	26 81       	ldd	r18, Z+6	; 0x06
    116a:	27 fd       	sbrc	r18, 7
    116c:	1c c0       	rjmp	.+56     	; 0x11a6 <main+0x480>
		return -1;
	}

	const byte type = var->attrs & PROPERTY_TYPE_MASK;
    116e:	27 70       	andi	r18, 0x07	; 7
	if( type != PROPERTY_TYPE_FLOAT ) {
    1170:	21 30       	cpi	r18, 0x01	; 1
    1172:	39 f0       	breq	.+14     	; 0x1182 <main+0x45c>

		// int set in float
		if( type == PROPERTY_TYPE_INT ) {
    1174:	21 11       	cpse	r18, r1
    1176:	b3 c0       	rjmp	.+358    	; 0x12de <main+0x5b8>
			var->fval = (float)v;
    1178:	62 83       	std	Z+2, r22	; 0x02
    117a:	73 83       	std	Z+3, r23	; 0x03
    117c:	84 83       	std	Z+4, r24	; 0x04
    117e:	95 83       	std	Z+5, r25	; 0x05
    1180:	c1 cf       	rjmp	.-126    	; 0x1104 <main+0x3de>

		return -2;
	}

	// ok, can set value
	var->fval = v;
    1182:	62 83       	std	Z+2, r22	; 0x02
    1184:	73 83       	std	Z+3, r23	; 0x03
    1186:	84 83       	std	Z+4, r24	; 0x04
    1188:	95 83       	std	Z+5, r25	; 0x05
    118a:	bc cf       	rjmp	.-136    	; 0x1104 <main+0x3de>
 * 			-1 if readonly
 * 			-2 if bad type
 */

int setAttr( rawAttribute* a, cstr v ) {
	return set_variant( &a->value, v );
    118c:	b7 01       	movw	r22, r14
    118e:	c8 01       	movw	r24, r16
    1190:	02 96       	adiw	r24, 0x02	; 2
    1192:	0e 94 41 04 	call	0x882	; 0x882 <_Z11set_variantP8rawValuePKc>
			rc = setAttr( attr, v );
			break;
		}
	}

	switch( rc ) {
    1196:	8e 3f       	cpi	r24, 0xFE	; 254
    1198:	ff ef       	ldi	r31, 0xFF	; 255
    119a:	9f 07       	cpc	r25, r31
    119c:	09 f4       	brne	.+2      	; 0x11a0 <main+0x47a>
    119e:	9f c0       	rjmp	.+318    	; 0x12de <main+0x5b8>
    11a0:	01 96       	adiw	r24, 0x01	; 1
    11a2:	09 f0       	breq	.+2      	; 0x11a6 <main+0x480>
    11a4:	af cf       	rjmp	.-162    	; 0x1104 <main+0x3de>
		case -1: {
			res->sendError( "M03", "READONLY" );
    11a6:	46 ef       	ldi	r20, 0xF6	; 246
    11a8:	51 e0       	ldi	r21, 0x01	; 1
    11aa:	6f ef       	ldi	r22, 0xFF	; 255
    11ac:	71 e0       	ldi	r23, 0x01	; 1
    11ae:	74 cf       	rjmp	.-280    	; 0x1098 <main+0x372>
			if( cState.parts[4] ) {
				cState.error = true;
				return;
			}

			cState.buf[cState.pos++] = 0;
    11b0:	b9 01       	movw	r22, r18
    11b2:	6f 5f       	subi	r22, 0xFF	; 255
    11b4:	7f 4f       	sbci	r23, 0xFF	; 255
    11b6:	70 93 56 02 	sts	0x0256, r23	; 0x800256 <cState+0x1>
    11ba:	60 93 55 02 	sts	0x0255, r22	; 0x800255 <cState>
    11be:	f9 01       	movw	r30, r18
    11c0:	eb 5a       	subi	r30, 0xAB	; 171
    11c2:	fd 4f       	sbci	r31, 0xFD	; 253
    11c4:	14 8a       	std	Z+20, r1	; 0x14
			cState.state++;
    11c6:	ba 01       	movw	r22, r20
    11c8:	6f 5f       	subi	r22, 0xFF	; 255
    11ca:	7f 4f       	sbci	r23, 0xFF	; 255
    11cc:	70 93 5e 02 	sts	0x025E, r23	; 0x80025e <cState+0x9>
    11d0:	60 93 5d 02 	sts	0x025D, r22	; 0x80025d <cState+0x8>
			cState.parts[cState.state] = &cState.buf[cState.pos];
    11d4:	44 0f       	add	r20, r20
    11d6:	55 1f       	adc	r21, r21
    11d8:	fa 01       	movw	r30, r20
    11da:	ef 59       	subi	r30, 0x9F	; 159
    11dc:	fd 4f       	sbci	r31, 0xFD	; 253
    11de:	26 59       	subi	r18, 0x96	; 150
    11e0:	3d 4f       	sbci	r19, 0xFD	; 253
    11e2:	31 83       	std	Z+1, r19	; 0x01
    11e4:	20 83       	st	Z, r18
		}
		// simple char, add it to the buffer (if space available)
		else if( cState.pos < PROTOCOL_MAXLEN ) {
			cState.buf[cState.pos++] = ch;
			if( !cState.parts[4] ) { // no when checksum mark seen
				cState.crc ^= ch;
    11e6:	90 91 5b 02 	lds	r25, 0x025B	; 0x80025b <cState+0x6>
    11ea:	89 27       	eor	r24, r25
    11ec:	80 93 5b 02 	sts	0x025B, r24	; 0x80025b <cState+0x6>
    11f0:	70 ce       	rjmp	.-800    	; 0xed2 <main+0x1ac>
			cState.state++;
			cState.parts[cState.state] = &cState.buf[cState.pos];
			cState.crc ^= ch;
		}
		// on the checksum separator
		else if( ch == PROTOCOL_CHECKSUM_SEPARATOR ) {
    11f2:	6a 32       	cpi	r22, 0x2A	; 42
    11f4:	c1 f4       	brne	.+48     	; 0x1226 <main+0x500>
			// first one ?
			if( cState.parts[4] ) {
    11f6:	80 91 67 02 	lds	r24, 0x0267	; 0x800267 <cState+0x12>
    11fa:	90 91 68 02 	lds	r25, 0x0268	; 0x800268 <cState+0x13>
    11fe:	89 2b       	or	r24, r25
    1200:	09 f0       	breq	.+2      	; 0x1204 <main+0x4de>
    1202:	b1 ce       	rjmp	.-670    	; 0xf66 <main+0x240>
				cState.error = true;
				return;
			}

			cState.buf[cState.pos++] = 0;
    1204:	c9 01       	movw	r24, r18
    1206:	01 96       	adiw	r24, 0x01	; 1
    1208:	90 93 56 02 	sts	0x0256, r25	; 0x800256 <cState+0x1>
    120c:	80 93 55 02 	sts	0x0255, r24	; 0x800255 <cState>
    1210:	f9 01       	movw	r30, r18
    1212:	eb 5a       	subi	r30, 0xAB	; 171
    1214:	fd 4f       	sbci	r31, 0xFD	; 253
    1216:	14 8a       	std	Z+20, r1	; 0x14
			cState.parts[4] = &cState.buf[cState.pos];
    1218:	26 59       	subi	r18, 0x96	; 150
    121a:	3d 4f       	sbci	r19, 0xFD	; 253
    121c:	30 93 68 02 	sts	0x0268, r19	; 0x800268 <cState+0x13>
    1220:	20 93 67 02 	sts	0x0267, r18	; 0x800267 <cState+0x12>
    1224:	56 ce       	rjmp	.-852    	; 0xed2 <main+0x1ac>
		}
		// simple char, add it to the buffer (if space available)
		else if( cState.pos < PROTOCOL_MAXLEN ) {
    1226:	26 39       	cpi	r18, 0x96	; 150
    1228:	31 05       	cpc	r19, r1
    122a:	08 f0       	brcs	.+2      	; 0x122e <main+0x508>
    122c:	9c ce       	rjmp	.-712    	; 0xf66 <main+0x240>
			cState.buf[cState.pos++] = ch;
    122e:	a9 01       	movw	r20, r18
    1230:	4f 5f       	subi	r20, 0xFF	; 255
    1232:	5f 4f       	sbci	r21, 0xFF	; 255
    1234:	50 93 56 02 	sts	0x0256, r21	; 0x800256 <cState+0x1>
    1238:	40 93 55 02 	sts	0x0255, r20	; 0x800255 <cState>
    123c:	2b 5a       	subi	r18, 0xAB	; 171
    123e:	3d 4f       	sbci	r19, 0xFD	; 253
    1240:	f9 01       	movw	r30, r18
    1242:	84 8b       	std	Z+20, r24	; 0x14
			if( !cState.parts[4] ) { // no when checksum mark seen
    1244:	20 91 67 02 	lds	r18, 0x0267	; 0x800267 <cState+0x12>
    1248:	30 91 68 02 	lds	r19, 0x0268	; 0x800268 <cState+0x13>
    124c:	23 2b       	or	r18, r19
    124e:	09 f0       	breq	.+2      	; 0x1252 <main+0x52c>
    1250:	40 ce       	rjmp	.-896    	; 0xed2 <main+0x1ac>
    1252:	c9 cf       	rjmp	.-110    	; 0x11e6 <main+0x4c0>
	}

	// finite state machine

	// end of transmission
	if( ch == PROTOCOL_EOT ) {
    1254:	8a 30       	cpi	r24, 0x0A	; 10
    1256:	09 f0       	breq	.+2      	; 0x125a <main+0x534>
    1258:	71 ce       	rjmp	.-798    	; 0xf3c <main+0x216>
		if( cState.pos == 0 ) {
			return;
		}

		// are we in error ?
		if( cState.error ) {
    125a:	80 91 5c 02 	lds	r24, 0x025C	; 0x80025c <cState+0x7>
    125e:	88 23       	and	r24, r24
    1260:	09 f4       	brne	.+2      	; 0x1264 <main+0x53e>
    1262:	84 ce       	rjmp	.-760    	; 0xf6c <main+0x246>
			comError( stream, "C04", "OVERFLOW" );
    1264:	6b e9       	ldi	r22, 0x9B	; 155
    1266:	71 e0       	ldi	r23, 0x01	; 1
    1268:	84 ea       	ldi	r24, 0xA4	; 164
    126a:	91 e0       	ldi	r25, 0x01	; 1

		// do we have a checksum ?
		if( cState.parts[4] ) {
			const char* checksum = cState.parts[4];
			if( checksum[0] != xtoa( ( cState.crc & 0xf0 ) >> 4 ) || checksum[1] != xtoa( cState.crc & 0xf ) ) {
				comError( stream, "C03", "BAD CHECKSUM" );
    126c:	0e 94 d7 03 	call	0x7ae	; 0x7ae <_Z8comErrorP6StreamPKcS2_.constprop.4>
    1270:	30 ce       	rjmp	.-928    	; 0xed2 <main+0x1ac>
		res->sendError( "M02", "UNKNOWN ATTRIBUTE" );
		return -1;
	}

	char buffer[32];
	res->send( prop->name, attr->name, calcPropState( attr->value.attrs ), valueToStr( &attr->value, buffer ) );
    1272:	be 01       	movw	r22, r28
    1274:	6f 5f       	subi	r22, 0xFF	; 255
    1276:	7f 4f       	sbci	r23, 0xFF	; 255
    1278:	c8 01       	movw	r24, r16
    127a:	02 96       	adiw	r24, 0x02	; 2
    127c:	0e 94 72 02 	call	0x4e4	; 0x4e4 <_Z10valueToStrP8rawValuePc>
    1280:	d8 01       	movw	r26, r16
    1282:	16 96       	adiw	r26, 0x06	; 6
    1284:	ec 91       	ld	r30, X
    1286:	e8 73       	andi	r30, 0x38	; 56
    1288:	e8 50       	subi	r30, 0x08	; 8
    128a:	2c e8       	ldi	r18, 0x8C	; 140
    128c:	31 e0       	ldi	r19, 0x01	; 1
    128e:	e9 31       	cpi	r30, 0x19	; 25
    1290:	38 f4       	brcc	.+14     	; 0x12a0 <main+0x57a>
    1292:	f0 e0       	ldi	r31, 0x00	; 0
    1294:	ee 0f       	add	r30, r30
    1296:	ff 1f       	adc	r31, r31
    1298:	e0 50       	subi	r30, 0x00	; 0
    129a:	ff 4f       	sbci	r31, 0xFF	; 255
    129c:	20 81       	ld	r18, Z
    129e:	31 81       	ldd	r19, Z+1	; 0x01
    12a0:	f8 01       	movw	r30, r16
    12a2:	40 81       	ld	r20, Z
    12a4:	51 81       	ldd	r21, Z+1	; 0x01
    12a6:	d7 01       	movw	r26, r14
	if( attr->change ) {
		attr->change( &attr->value );
	}

	char buffer[32];
	res->send( prop->name, attr->name, calcPropState( attr->value.attrs ), valueToStr( &attr->value, buffer ) );
    12a8:	6d 91       	ld	r22, X+
    12aa:	7c 91       	ld	r23, X
    12ac:	8c 01       	movw	r16, r24
    12ae:	ce 01       	movw	r24, r28
    12b0:	81 96       	adiw	r24, 0x21	; 33
    12b2:	0e 94 f8 03 	call	0x7f0	; 0x7f0 <_ZN8Response4sendEPKcS1_S1_S1_>
    12b6:	f4 ce       	rjmp	.-536    	; 0x10a0 <main+0x37a>
	}

	// search given attribute
	rawAttribute* attr = findAttr( prop, req->getValueStr( 0 ) );
	if( !attr ) {
		res->sendError( "M02", "UNKNOWN ATTRIBUTE" );
    12b8:	46 e1       	ldi	r20, 0x16	; 22
    12ba:	52 e0       	ldi	r21, 0x02	; 2
    12bc:	68 e2       	ldi	r22, 0x28	; 40
    12be:	72 e0       	ldi	r23, 0x02	; 2
    12c0:	eb ce       	rjmp	.-554    	; 0x1098 <main+0x372>
	if( !v ) {
		res->sendError( "M05", "NO VALUE GIVEN" );
		return -1;
	}

	switch( attr->value.attrs & PROPERTY_TYPE_MASK ) {
    12c2:	d6 80       	ldd	r13, Z+6	; 0x06
    12c4:	8d 2d       	mov	r24, r13
    12c6:	87 70       	andi	r24, 0x07	; 7
    12c8:	81 30       	cpi	r24, 0x01	; 1
    12ca:	09 f4       	brne	.+2      	; 0x12ce <main+0x5a8>
    12cc:	42 cf       	rjmp	.-380    	; 0x1152 <main+0x42c>
    12ce:	08 f4       	brcc	.+2      	; 0x12d2 <main+0x5ac>
    12d0:	08 cf       	rjmp	.-496    	; 0x10e2 <main+0x3bc>
    12d2:	82 30       	cpi	r24, 0x02	; 2
    12d4:	09 f4       	brne	.+2      	; 0x12d8 <main+0x5b2>
    12d6:	5a cf       	rjmp	.-332    	; 0x118c <main+0x466>
    12d8:	83 30       	cpi	r24, 0x03	; 3
    12da:	09 f4       	brne	.+2      	; 0x12de <main+0x5b8>
    12dc:	57 cf       	rjmp	.-338    	; 0x118c <main+0x466>
			res->sendError( "M03", "READONLY" );
			return -1;
		}

		case -2: {
			res->sendError( "M04", "BAD VALUE TYPE" );
    12de:	43 e0       	ldi	r20, 0x03	; 3
    12e0:	52 e0       	ldi	r21, 0x02	; 2
    12e2:	62 e1       	ldi	r22, 0x12	; 18
    12e4:	72 e0       	ldi	r23, 0x02	; 2
    12e6:	d8 ce       	rjmp	.-592    	; 0x1098 <main+0x372>

000012e8 <atof>:
    12e8:	66 27       	eor	r22, r22
    12ea:	77 27       	eor	r23, r23
    12ec:	0c 94 9e 09 	jmp	0x133c	; 0x133c <strtod>

000012f0 <atoi>:
    12f0:	fc 01       	movw	r30, r24
    12f2:	88 27       	eor	r24, r24
    12f4:	99 27       	eor	r25, r25
    12f6:	e8 94       	clt
    12f8:	21 91       	ld	r18, Z+
    12fa:	20 32       	cpi	r18, 0x20	; 32
    12fc:	e9 f3       	breq	.-6      	; 0x12f8 <atoi+0x8>
    12fe:	29 30       	cpi	r18, 0x09	; 9
    1300:	10 f0       	brcs	.+4      	; 0x1306 <atoi+0x16>
    1302:	2e 30       	cpi	r18, 0x0E	; 14
    1304:	c8 f3       	brcs	.-14     	; 0x12f8 <atoi+0x8>
    1306:	2b 32       	cpi	r18, 0x2B	; 43
    1308:	41 f0       	breq	.+16     	; 0x131a <atoi+0x2a>
    130a:	2d 32       	cpi	r18, 0x2D	; 45
    130c:	39 f4       	brne	.+14     	; 0x131c <atoi+0x2c>
    130e:	68 94       	set
    1310:	04 c0       	rjmp	.+8      	; 0x131a <atoi+0x2a>
    1312:	0e 94 96 09 	call	0x132c	; 0x132c <__mulhi_const_10>
    1316:	82 0f       	add	r24, r18
    1318:	91 1d       	adc	r25, r1
    131a:	21 91       	ld	r18, Z+
    131c:	20 53       	subi	r18, 0x30	; 48
    131e:	2a 30       	cpi	r18, 0x0A	; 10
    1320:	c0 f3       	brcs	.-16     	; 0x1312 <atoi+0x22>
    1322:	1e f4       	brtc	.+6      	; 0x132a <atoi+0x3a>
    1324:	90 95       	com	r25
    1326:	81 95       	neg	r24
    1328:	9f 4f       	sbci	r25, 0xFF	; 255
    132a:	08 95       	ret

0000132c <__mulhi_const_10>:
    132c:	7a e0       	ldi	r23, 0x0A	; 10
    132e:	97 9f       	mul	r25, r23
    1330:	90 2d       	mov	r25, r0
    1332:	87 9f       	mul	r24, r23
    1334:	80 2d       	mov	r24, r0
    1336:	91 0d       	add	r25, r1
    1338:	11 24       	eor	r1, r1
    133a:	08 95       	ret

0000133c <strtod>:
    133c:	b0 e0       	ldi	r27, 0x00	; 0
    133e:	a0 e0       	ldi	r26, 0x00	; 0
    1340:	e4 ea       	ldi	r30, 0xA4	; 164
    1342:	f9 e0       	ldi	r31, 0x09	; 9
    1344:	0c 94 47 0c 	jmp	0x188e	; 0x188e <__prologue_saves__+0xc>
    1348:	5c 01       	movw	r10, r24
    134a:	7b 01       	movw	r14, r22
    134c:	61 15       	cp	r22, r1
    134e:	71 05       	cpc	r23, r1
    1350:	19 f0       	breq	.+6      	; 0x1358 <strtod+0x1c>
    1352:	db 01       	movw	r26, r22
    1354:	8d 93       	st	X+, r24
    1356:	9c 93       	st	X, r25
    1358:	85 01       	movw	r16, r10
    135a:	0f 5f       	subi	r16, 0xFF	; 255
    135c:	1f 4f       	sbci	r17, 0xFF	; 255
    135e:	f5 01       	movw	r30, r10
    1360:	d0 81       	ld	r29, Z
    1362:	8d 2f       	mov	r24, r29
    1364:	90 e0       	ldi	r25, 0x00	; 0
    1366:	0e 94 ee 0a 	call	0x15dc	; 0x15dc <isspace>
    136a:	6c 01       	movw	r12, r24
    136c:	89 2b       	or	r24, r25
    136e:	b9 f5       	brne	.+110    	; 0x13de <strtod+0xa2>
    1370:	dd 32       	cpi	r29, 0x2D	; 45
    1372:	b9 f5       	brne	.+110    	; 0x13e2 <strtod+0xa6>
    1374:	0f 5f       	subi	r16, 0xFF	; 255
    1376:	1f 4f       	sbci	r17, 0xFF	; 255
    1378:	d5 01       	movw	r26, r10
    137a:	11 96       	adiw	r26, 0x01	; 1
    137c:	dc 91       	ld	r29, X
    137e:	c1 e0       	ldi	r28, 0x01	; 1
    1380:	58 01       	movw	r10, r16
    1382:	f1 e0       	ldi	r31, 0x01	; 1
    1384:	af 1a       	sub	r10, r31
    1386:	b1 08       	sbc	r11, r1
    1388:	43 e0       	ldi	r20, 0x03	; 3
    138a:	50 e0       	ldi	r21, 0x00	; 0
    138c:	60 e7       	ldi	r22, 0x70	; 112
    138e:	70 e0       	ldi	r23, 0x00	; 0
    1390:	c5 01       	movw	r24, r10
    1392:	0e 94 f7 0a 	call	0x15ee	; 0x15ee <strncasecmp_P>
    1396:	89 2b       	or	r24, r25
    1398:	69 f5       	brne	.+90     	; 0x13f4 <strtod+0xb8>
    139a:	68 01       	movw	r12, r16
    139c:	82 e0       	ldi	r24, 0x02	; 2
    139e:	c8 0e       	add	r12, r24
    13a0:	d1 1c       	adc	r13, r1
    13a2:	45 e0       	ldi	r20, 0x05	; 5
    13a4:	50 e0       	ldi	r21, 0x00	; 0
    13a6:	6b e6       	ldi	r22, 0x6B	; 107
    13a8:	70 e0       	ldi	r23, 0x00	; 0
    13aa:	c6 01       	movw	r24, r12
    13ac:	0e 94 f7 0a 	call	0x15ee	; 0x15ee <strncasecmp_P>
    13b0:	89 2b       	or	r24, r25
    13b2:	21 f4       	brne	.+8      	; 0x13bc <strtod+0x80>
    13b4:	68 01       	movw	r12, r16
    13b6:	97 e0       	ldi	r25, 0x07	; 7
    13b8:	c9 0e       	add	r12, r25
    13ba:	d1 1c       	adc	r13, r1
    13bc:	e1 14       	cp	r14, r1
    13be:	f1 04       	cpc	r15, r1
    13c0:	19 f0       	breq	.+6      	; 0x13c8 <strtod+0x8c>
    13c2:	d7 01       	movw	r26, r14
    13c4:	cd 92       	st	X+, r12
    13c6:	dc 92       	st	X, r13
    13c8:	60 e0       	ldi	r22, 0x00	; 0
    13ca:	70 e0       	ldi	r23, 0x00	; 0
    13cc:	80 e8       	ldi	r24, 0x80	; 128
    13ce:	9f ef       	ldi	r25, 0xFF	; 255
    13d0:	c1 11       	cpse	r28, r1
    13d2:	ff c0       	rjmp	.+510    	; 0x15d2 <strtod+0x296>
    13d4:	60 e0       	ldi	r22, 0x00	; 0
    13d6:	70 e0       	ldi	r23, 0x00	; 0
    13d8:	80 e8       	ldi	r24, 0x80	; 128
    13da:	9f e7       	ldi	r25, 0x7F	; 127
    13dc:	fa c0       	rjmp	.+500    	; 0x15d2 <strtod+0x296>
    13de:	58 01       	movw	r10, r16
    13e0:	bb cf       	rjmp	.-138    	; 0x1358 <strtod+0x1c>
    13e2:	db 32       	cpi	r29, 0x2B	; 43
    13e4:	29 f4       	brne	.+10     	; 0x13f0 <strtod+0xb4>
    13e6:	85 01       	movw	r16, r10
    13e8:	0e 5f       	subi	r16, 0xFE	; 254
    13ea:	1f 4f       	sbci	r17, 0xFF	; 255
    13ec:	f5 01       	movw	r30, r10
    13ee:	d1 81       	ldd	r29, Z+1	; 0x01
    13f0:	c0 e0       	ldi	r28, 0x00	; 0
    13f2:	c6 cf       	rjmp	.-116    	; 0x1380 <strtod+0x44>
    13f4:	43 e0       	ldi	r20, 0x03	; 3
    13f6:	50 e0       	ldi	r21, 0x00	; 0
    13f8:	68 e6       	ldi	r22, 0x68	; 104
    13fa:	70 e0       	ldi	r23, 0x00	; 0
    13fc:	c5 01       	movw	r24, r10
    13fe:	0e 94 f7 0a 	call	0x15ee	; 0x15ee <strncasecmp_P>
    1402:	89 2b       	or	r24, r25
    1404:	e9 f0       	breq	.+58     	; 0x1440 <strtod+0x104>
    1406:	f8 01       	movw	r30, r16
    1408:	10 e0       	ldi	r17, 0x00	; 0
    140a:	00 e0       	ldi	r16, 0x00	; 0
    140c:	20 e0       	ldi	r18, 0x00	; 0
    140e:	30 e0       	ldi	r19, 0x00	; 0
    1410:	a9 01       	movw	r20, r18
    1412:	5f 01       	movw	r10, r30
    1414:	b0 ed       	ldi	r27, 0xD0	; 208
    1416:	8b 2e       	mov	r8, r27
    1418:	8d 0e       	add	r8, r29
    141a:	89 e0       	ldi	r24, 0x09	; 9
    141c:	88 15       	cp	r24, r8
    141e:	c8 f1       	brcs	.+114    	; 0x1492 <strtod+0x156>
    1420:	9c 2e       	mov	r9, r28
    1422:	68 94       	set
    1424:	91 f8       	bld	r9, 1
    1426:	8c 2f       	mov	r24, r28
    1428:	88 70       	andi	r24, 0x08	; 8
    142a:	c2 ff       	sbrs	r28, 2
    142c:	16 c0       	rjmp	.+44     	; 0x145a <strtod+0x11e>
    142e:	81 11       	cpse	r24, r1
    1430:	02 c0       	rjmp	.+4      	; 0x1436 <strtod+0xfa>
    1432:	0f 5f       	subi	r16, 0xFF	; 255
    1434:	1f 4f       	sbci	r17, 0xFF	; 255
    1436:	31 96       	adiw	r30, 0x01	; 1
    1438:	d5 01       	movw	r26, r10
    143a:	dc 91       	ld	r29, X
    143c:	c9 2d       	mov	r28, r9
    143e:	e9 cf       	rjmp	.-46     	; 0x1412 <strtod+0xd6>
    1440:	e1 14       	cp	r14, r1
    1442:	f1 04       	cpc	r15, r1
    1444:	29 f0       	breq	.+10     	; 0x1450 <strtod+0x114>
    1446:	0e 5f       	subi	r16, 0xFE	; 254
    1448:	1f 4f       	sbci	r17, 0xFF	; 255
    144a:	f7 01       	movw	r30, r14
    144c:	11 83       	std	Z+1, r17	; 0x01
    144e:	00 83       	st	Z, r16
    1450:	60 e0       	ldi	r22, 0x00	; 0
    1452:	70 e0       	ldi	r23, 0x00	; 0
    1454:	80 ec       	ldi	r24, 0xC0	; 192
    1456:	9f e7       	ldi	r25, 0x7F	; 127
    1458:	bc c0       	rjmp	.+376    	; 0x15d2 <strtod+0x296>
    145a:	88 23       	and	r24, r24
    145c:	11 f0       	breq	.+4      	; 0x1462 <strtod+0x126>
    145e:	01 50       	subi	r16, 0x01	; 1
    1460:	11 09       	sbc	r17, r1
    1462:	a5 e0       	ldi	r26, 0x05	; 5
    1464:	b0 e0       	ldi	r27, 0x00	; 0
    1466:	0e 94 36 0c 	call	0x186c	; 0x186c <__muluhisi3>
    146a:	9b 01       	movw	r18, r22
    146c:	ac 01       	movw	r20, r24
    146e:	22 0f       	add	r18, r18
    1470:	33 1f       	adc	r19, r19
    1472:	44 1f       	adc	r20, r20
    1474:	55 1f       	adc	r21, r21
    1476:	28 0d       	add	r18, r8
    1478:	31 1d       	adc	r19, r1
    147a:	41 1d       	adc	r20, r1
    147c:	51 1d       	adc	r21, r1
    147e:	28 39       	cpi	r18, 0x98	; 152
    1480:	99 e9       	ldi	r25, 0x99	; 153
    1482:	39 07       	cpc	r19, r25
    1484:	49 07       	cpc	r20, r25
    1486:	99 e1       	ldi	r25, 0x19	; 25
    1488:	59 07       	cpc	r21, r25
    148a:	a8 f2       	brcs	.-86     	; 0x1436 <strtod+0xfa>
    148c:	c6 60       	ori	r28, 0x06	; 6
    148e:	9c 2e       	mov	r9, r28
    1490:	d2 cf       	rjmp	.-92     	; 0x1436 <strtod+0xfa>
    1492:	ae ef       	ldi	r26, 0xFE	; 254
    1494:	8a 12       	cpse	r8, r26
    1496:	06 c0       	rjmp	.+12     	; 0x14a4 <strtod+0x168>
    1498:	c3 fd       	sbrc	r28, 3
    149a:	3c c0       	rjmp	.+120    	; 0x1514 <strtod+0x1d8>
    149c:	9c 2e       	mov	r9, r28
    149e:	68 94       	set
    14a0:	93 f8       	bld	r9, 3
    14a2:	c9 cf       	rjmp	.-110    	; 0x1436 <strtod+0xfa>
    14a4:	df 7d       	andi	r29, 0xDF	; 223
    14a6:	d5 34       	cpi	r29, 0x45	; 69
    14a8:	a9 f5       	brne	.+106    	; 0x1514 <strtod+0x1d8>
    14aa:	80 81       	ld	r24, Z
    14ac:	8d 32       	cpi	r24, 0x2D	; 45
    14ae:	39 f4       	brne	.+14     	; 0x14be <strtod+0x182>
    14b0:	c0 61       	ori	r28, 0x10	; 16
    14b2:	df 01       	movw	r26, r30
    14b4:	12 96       	adiw	r26, 0x02	; 2
    14b6:	81 81       	ldd	r24, Z+1	; 0x01
    14b8:	62 e0       	ldi	r22, 0x02	; 2
    14ba:	70 e0       	ldi	r23, 0x00	; 0
    14bc:	06 c0       	rjmp	.+12     	; 0x14ca <strtod+0x18e>
    14be:	df 01       	movw	r26, r30
    14c0:	8b 32       	cpi	r24, 0x2B	; 43
    14c2:	c1 f3       	breq	.-16     	; 0x14b4 <strtod+0x178>
    14c4:	11 96       	adiw	r26, 0x01	; 1
    14c6:	61 e0       	ldi	r22, 0x01	; 1
    14c8:	70 e0       	ldi	r23, 0x00	; 0
    14ca:	80 53       	subi	r24, 0x30	; 48
    14cc:	5d 01       	movw	r10, r26
    14ce:	a6 1a       	sub	r10, r22
    14d0:	b7 0a       	sbc	r11, r23
    14d2:	8a 30       	cpi	r24, 0x0A	; 10
    14d4:	f8 f4       	brcc	.+62     	; 0x1514 <strtod+0x1d8>
    14d6:	e0 e8       	ldi	r30, 0x80	; 128
    14d8:	ce 16       	cp	r12, r30
    14da:	ec e0       	ldi	r30, 0x0C	; 12
    14dc:	de 06       	cpc	r13, r30
    14de:	5c f4       	brge	.+22     	; 0x14f6 <strtod+0x1ba>
    14e0:	b6 01       	movw	r22, r12
    14e2:	66 0f       	add	r22, r22
    14e4:	77 1f       	adc	r23, r23
    14e6:	66 0f       	add	r22, r22
    14e8:	77 1f       	adc	r23, r23
    14ea:	c6 0e       	add	r12, r22
    14ec:	d7 1e       	adc	r13, r23
    14ee:	cc 0c       	add	r12, r12
    14f0:	dd 1c       	adc	r13, r13
    14f2:	c8 0e       	add	r12, r24
    14f4:	d1 1c       	adc	r13, r1
    14f6:	5d 01       	movw	r10, r26
    14f8:	ff ef       	ldi	r31, 0xFF	; 255
    14fa:	af 1a       	sub	r10, r31
    14fc:	bf 0a       	sbc	r11, r31
    14fe:	8c 91       	ld	r24, X
    1500:	80 53       	subi	r24, 0x30	; 48
    1502:	8a 30       	cpi	r24, 0x0A	; 10
    1504:	a8 f1       	brcs	.+106    	; 0x1570 <strtod+0x234>
    1506:	c4 ff       	sbrs	r28, 4
    1508:	03 c0       	rjmp	.+6      	; 0x1510 <strtod+0x1d4>
    150a:	d1 94       	neg	r13
    150c:	c1 94       	neg	r12
    150e:	d1 08       	sbc	r13, r1
    1510:	0c 0d       	add	r16, r12
    1512:	1d 1d       	adc	r17, r13
    1514:	c1 ff       	sbrs	r28, 1
    1516:	09 c0       	rjmp	.+18     	; 0x152a <strtod+0x1ee>
    1518:	e1 14       	cp	r14, r1
    151a:	f1 04       	cpc	r15, r1
    151c:	31 f0       	breq	.+12     	; 0x152a <strtod+0x1ee>
    151e:	81 e0       	ldi	r24, 0x01	; 1
    1520:	a8 1a       	sub	r10, r24
    1522:	b1 08       	sbc	r11, r1
    1524:	d7 01       	movw	r26, r14
    1526:	ad 92       	st	X+, r10
    1528:	bc 92       	st	X, r11
    152a:	ca 01       	movw	r24, r20
    152c:	b9 01       	movw	r22, r18
    152e:	0e 94 14 0b 	call	0x1628	; 0x1628 <__floatunsisf>
    1532:	c3 70       	andi	r28, 0x03	; 3
    1534:	c3 30       	cpi	r28, 0x03	; 3
    1536:	09 f4       	brne	.+2      	; 0x153a <strtod+0x1fe>
    1538:	90 58       	subi	r25, 0x80	; 128
    153a:	4b 01       	movw	r8, r22
    153c:	5c 01       	movw	r10, r24
    153e:	20 e0       	ldi	r18, 0x00	; 0
    1540:	30 e0       	ldi	r19, 0x00	; 0
    1542:	a9 01       	movw	r20, r18
    1544:	0e 94 0f 0b 	call	0x161e	; 0x161e <__cmpsf2>
    1548:	88 23       	and	r24, r24
    154a:	09 f4       	brne	.+2      	; 0x154e <strtod+0x212>
    154c:	40 c0       	rjmp	.+128    	; 0x15ce <strtod+0x292>
    154e:	cf e9       	ldi	r28, 0x9F	; 159
    1550:	d0 e0       	ldi	r29, 0x00	; 0
    1552:	17 ff       	sbrs	r17, 7
    1554:	05 c0       	rjmp	.+10     	; 0x1560 <strtod+0x224>
    1556:	11 95       	neg	r17
    1558:	01 95       	neg	r16
    155a:	11 09       	sbc	r17, r1
    155c:	c7 e8       	ldi	r28, 0x87	; 135
    155e:	d0 e0       	ldi	r29, 0x00	; 0
    1560:	6e 01       	movw	r12, r28
    1562:	b8 e1       	ldi	r27, 0x18	; 24
    1564:	cb 1a       	sub	r12, r27
    1566:	d1 08       	sbc	r13, r1
    1568:	80 e2       	ldi	r24, 0x20	; 32
    156a:	e8 2e       	mov	r14, r24
    156c:	f1 2c       	mov	r15, r1
    156e:	0f c0       	rjmp	.+30     	; 0x158e <strtod+0x252>
    1570:	d5 01       	movw	r26, r10
    1572:	b1 cf       	rjmp	.-158    	; 0x14d6 <strtod+0x19a>
    1574:	fe 01       	movw	r30, r28
    1576:	25 91       	lpm	r18, Z+
    1578:	35 91       	lpm	r19, Z+
    157a:	45 91       	lpm	r20, Z+
    157c:	54 91       	lpm	r21, Z
    157e:	0e 19       	sub	r16, r14
    1580:	1f 09       	sbc	r17, r15
    1582:	c5 01       	movw	r24, r10
    1584:	b4 01       	movw	r22, r8
    1586:	0e 94 75 0b 	call	0x16ea	; 0x16ea <__mulsf3>
    158a:	4b 01       	movw	r8, r22
    158c:	5c 01       	movw	r10, r24
    158e:	d5 01       	movw	r26, r10
    1590:	c4 01       	movw	r24, r8
    1592:	0e 15       	cp	r16, r14
    1594:	1f 05       	cpc	r17, r15
    1596:	74 f7       	brge	.-36     	; 0x1574 <strtod+0x238>
    1598:	24 97       	sbiw	r28, 0x04	; 4
    159a:	f5 94       	asr	r15
    159c:	e7 94       	ror	r14
    159e:	cc 16       	cp	r12, r28
    15a0:	dd 06       	cpc	r13, r29
    15a2:	a9 f7       	brne	.-22     	; 0x158e <strtod+0x252>
    15a4:	8a 2f       	mov	r24, r26
    15a6:	88 0f       	add	r24, r24
    15a8:	8b 2f       	mov	r24, r27
    15aa:	88 1f       	adc	r24, r24
    15ac:	8f 3f       	cpi	r24, 0xFF	; 255
    15ae:	49 f0       	breq	.+18     	; 0x15c2 <strtod+0x286>
    15b0:	20 e0       	ldi	r18, 0x00	; 0
    15b2:	30 e0       	ldi	r19, 0x00	; 0
    15b4:	a9 01       	movw	r20, r18
    15b6:	c5 01       	movw	r24, r10
    15b8:	b4 01       	movw	r22, r8
    15ba:	0e 94 0f 0b 	call	0x161e	; 0x161e <__cmpsf2>
    15be:	81 11       	cpse	r24, r1
    15c0:	06 c0       	rjmp	.+12     	; 0x15ce <strtod+0x292>
    15c2:	82 e2       	ldi	r24, 0x22	; 34
    15c4:	90 e0       	ldi	r25, 0x00	; 0
    15c6:	90 93 2e 04 	sts	0x042E, r25	; 0x80042e <errno+0x1>
    15ca:	80 93 2d 04 	sts	0x042D, r24	; 0x80042d <errno>
    15ce:	c5 01       	movw	r24, r10
    15d0:	b4 01       	movw	r22, r8
    15d2:	cd b7       	in	r28, 0x3d	; 61
    15d4:	de b7       	in	r29, 0x3e	; 62
    15d6:	ec e0       	ldi	r30, 0x0C	; 12
    15d8:	0c 94 63 0c 	jmp	0x18c6	; 0x18c6 <__epilogue_restores__+0xc>

000015dc <isspace>:
    15dc:	91 11       	cpse	r25, r1
    15de:	0c 94 e2 0b 	jmp	0x17c4	; 0x17c4 <__ctype_isfalse>
    15e2:	80 32       	cpi	r24, 0x20	; 32
    15e4:	19 f0       	breq	.+6      	; 0x15ec <isspace+0x10>
    15e6:	89 50       	subi	r24, 0x09	; 9
    15e8:	85 50       	subi	r24, 0x05	; 5
    15ea:	c8 f7       	brcc	.-14     	; 0x15de <isspace+0x2>
    15ec:	08 95       	ret

000015ee <strncasecmp_P>:
    15ee:	fb 01       	movw	r30, r22
    15f0:	dc 01       	movw	r26, r24
    15f2:	41 50       	subi	r20, 0x01	; 1
    15f4:	50 40       	sbci	r21, 0x00	; 0
    15f6:	88 f0       	brcs	.+34     	; 0x161a <strncasecmp_P+0x2c>
    15f8:	8d 91       	ld	r24, X+
    15fa:	81 34       	cpi	r24, 0x41	; 65
    15fc:	1c f0       	brlt	.+6      	; 0x1604 <strncasecmp_P+0x16>
    15fe:	8b 35       	cpi	r24, 0x5B	; 91
    1600:	0c f4       	brge	.+2      	; 0x1604 <strncasecmp_P+0x16>
    1602:	80 5e       	subi	r24, 0xE0	; 224
    1604:	65 91       	lpm	r22, Z+
    1606:	61 34       	cpi	r22, 0x41	; 65
    1608:	1c f0       	brlt	.+6      	; 0x1610 <strncasecmp_P+0x22>
    160a:	6b 35       	cpi	r22, 0x5B	; 91
    160c:	0c f4       	brge	.+2      	; 0x1610 <strncasecmp_P+0x22>
    160e:	60 5e       	subi	r22, 0xE0	; 224
    1610:	86 1b       	sub	r24, r22
    1612:	61 11       	cpse	r22, r1
    1614:	71 f3       	breq	.-36     	; 0x15f2 <strncasecmp_P+0x4>
    1616:	99 0b       	sbc	r25, r25
    1618:	08 95       	ret
    161a:	88 1b       	sub	r24, r24
    161c:	fc cf       	rjmp	.-8      	; 0x1616 <strncasecmp_P+0x28>

0000161e <__cmpsf2>:
    161e:	0e 94 51 0b 	call	0x16a2	; 0x16a2 <__fp_cmp>
    1622:	08 f4       	brcc	.+2      	; 0x1626 <__cmpsf2+0x8>
    1624:	81 e0       	ldi	r24, 0x01	; 1
    1626:	08 95       	ret

00001628 <__floatunsisf>:
    1628:	e8 94       	clt
    162a:	09 c0       	rjmp	.+18     	; 0x163e <__floatsisf+0x12>

0000162c <__floatsisf>:
    162c:	97 fb       	bst	r25, 7
    162e:	3e f4       	brtc	.+14     	; 0x163e <__floatsisf+0x12>
    1630:	90 95       	com	r25
    1632:	80 95       	com	r24
    1634:	70 95       	com	r23
    1636:	61 95       	neg	r22
    1638:	7f 4f       	sbci	r23, 0xFF	; 255
    163a:	8f 4f       	sbci	r24, 0xFF	; 255
    163c:	9f 4f       	sbci	r25, 0xFF	; 255
    163e:	99 23       	and	r25, r25
    1640:	a9 f0       	breq	.+42     	; 0x166c <__floatsisf+0x40>
    1642:	f9 2f       	mov	r31, r25
    1644:	96 e9       	ldi	r25, 0x96	; 150
    1646:	bb 27       	eor	r27, r27
    1648:	93 95       	inc	r25
    164a:	f6 95       	lsr	r31
    164c:	87 95       	ror	r24
    164e:	77 95       	ror	r23
    1650:	67 95       	ror	r22
    1652:	b7 95       	ror	r27
    1654:	f1 11       	cpse	r31, r1
    1656:	f8 cf       	rjmp	.-16     	; 0x1648 <__floatsisf+0x1c>
    1658:	fa f4       	brpl	.+62     	; 0x1698 <__floatsisf+0x6c>
    165a:	bb 0f       	add	r27, r27
    165c:	11 f4       	brne	.+4      	; 0x1662 <__floatsisf+0x36>
    165e:	60 ff       	sbrs	r22, 0
    1660:	1b c0       	rjmp	.+54     	; 0x1698 <__floatsisf+0x6c>
    1662:	6f 5f       	subi	r22, 0xFF	; 255
    1664:	7f 4f       	sbci	r23, 0xFF	; 255
    1666:	8f 4f       	sbci	r24, 0xFF	; 255
    1668:	9f 4f       	sbci	r25, 0xFF	; 255
    166a:	16 c0       	rjmp	.+44     	; 0x1698 <__floatsisf+0x6c>
    166c:	88 23       	and	r24, r24
    166e:	11 f0       	breq	.+4      	; 0x1674 <__floatsisf+0x48>
    1670:	96 e9       	ldi	r25, 0x96	; 150
    1672:	11 c0       	rjmp	.+34     	; 0x1696 <__floatsisf+0x6a>
    1674:	77 23       	and	r23, r23
    1676:	21 f0       	breq	.+8      	; 0x1680 <__floatsisf+0x54>
    1678:	9e e8       	ldi	r25, 0x8E	; 142
    167a:	87 2f       	mov	r24, r23
    167c:	76 2f       	mov	r23, r22
    167e:	05 c0       	rjmp	.+10     	; 0x168a <__floatsisf+0x5e>
    1680:	66 23       	and	r22, r22
    1682:	71 f0       	breq	.+28     	; 0x16a0 <__floatsisf+0x74>
    1684:	96 e8       	ldi	r25, 0x86	; 134
    1686:	86 2f       	mov	r24, r22
    1688:	70 e0       	ldi	r23, 0x00	; 0
    168a:	60 e0       	ldi	r22, 0x00	; 0
    168c:	2a f0       	brmi	.+10     	; 0x1698 <__floatsisf+0x6c>
    168e:	9a 95       	dec	r25
    1690:	66 0f       	add	r22, r22
    1692:	77 1f       	adc	r23, r23
    1694:	88 1f       	adc	r24, r24
    1696:	da f7       	brpl	.-10     	; 0x168e <__floatsisf+0x62>
    1698:	88 0f       	add	r24, r24
    169a:	96 95       	lsr	r25
    169c:	87 95       	ror	r24
    169e:	97 f9       	bld	r25, 7
    16a0:	08 95       	ret

000016a2 <__fp_cmp>:
    16a2:	99 0f       	add	r25, r25
    16a4:	00 08       	sbc	r0, r0
    16a6:	55 0f       	add	r21, r21
    16a8:	aa 0b       	sbc	r26, r26
    16aa:	e0 e8       	ldi	r30, 0x80	; 128
    16ac:	fe ef       	ldi	r31, 0xFE	; 254
    16ae:	16 16       	cp	r1, r22
    16b0:	17 06       	cpc	r1, r23
    16b2:	e8 07       	cpc	r30, r24
    16b4:	f9 07       	cpc	r31, r25
    16b6:	c0 f0       	brcs	.+48     	; 0x16e8 <__fp_cmp+0x46>
    16b8:	12 16       	cp	r1, r18
    16ba:	13 06       	cpc	r1, r19
    16bc:	e4 07       	cpc	r30, r20
    16be:	f5 07       	cpc	r31, r21
    16c0:	98 f0       	brcs	.+38     	; 0x16e8 <__fp_cmp+0x46>
    16c2:	62 1b       	sub	r22, r18
    16c4:	73 0b       	sbc	r23, r19
    16c6:	84 0b       	sbc	r24, r20
    16c8:	95 0b       	sbc	r25, r21
    16ca:	39 f4       	brne	.+14     	; 0x16da <__fp_cmp+0x38>
    16cc:	0a 26       	eor	r0, r26
    16ce:	61 f0       	breq	.+24     	; 0x16e8 <__fp_cmp+0x46>
    16d0:	23 2b       	or	r18, r19
    16d2:	24 2b       	or	r18, r20
    16d4:	25 2b       	or	r18, r21
    16d6:	21 f4       	brne	.+8      	; 0x16e0 <__fp_cmp+0x3e>
    16d8:	08 95       	ret
    16da:	0a 26       	eor	r0, r26
    16dc:	09 f4       	brne	.+2      	; 0x16e0 <__fp_cmp+0x3e>
    16de:	a1 40       	sbci	r26, 0x01	; 1
    16e0:	a6 95       	lsr	r26
    16e2:	8f ef       	ldi	r24, 0xFF	; 255
    16e4:	81 1d       	adc	r24, r1
    16e6:	81 1d       	adc	r24, r1
    16e8:	08 95       	ret

000016ea <__mulsf3>:
    16ea:	0e 94 88 0b 	call	0x1710	; 0x1710 <__mulsf3x>
    16ee:	0c 94 fc 0b 	jmp	0x17f8	; 0x17f8 <__fp_round>
    16f2:	0e 94 ee 0b 	call	0x17dc	; 0x17dc <__fp_pscA>
    16f6:	38 f0       	brcs	.+14     	; 0x1706 <__mulsf3+0x1c>
    16f8:	0e 94 f5 0b 	call	0x17ea	; 0x17ea <__fp_pscB>
    16fc:	20 f0       	brcs	.+8      	; 0x1706 <__mulsf3+0x1c>
    16fe:	95 23       	and	r25, r21
    1700:	11 f0       	breq	.+4      	; 0x1706 <__mulsf3+0x1c>
    1702:	0c 94 e5 0b 	jmp	0x17ca	; 0x17ca <__fp_inf>
    1706:	0c 94 eb 0b 	jmp	0x17d6	; 0x17d6 <__fp_nan>
    170a:	11 24       	eor	r1, r1
    170c:	0c 94 30 0c 	jmp	0x1860	; 0x1860 <__fp_szero>

00001710 <__mulsf3x>:
    1710:	0e 94 0d 0c 	call	0x181a	; 0x181a <__fp_split3>
    1714:	70 f3       	brcs	.-36     	; 0x16f2 <__mulsf3+0x8>

00001716 <__mulsf3_pse>:
    1716:	95 9f       	mul	r25, r21
    1718:	c1 f3       	breq	.-16     	; 0x170a <__mulsf3+0x20>
    171a:	95 0f       	add	r25, r21
    171c:	50 e0       	ldi	r21, 0x00	; 0
    171e:	55 1f       	adc	r21, r21
    1720:	62 9f       	mul	r22, r18
    1722:	f0 01       	movw	r30, r0
    1724:	72 9f       	mul	r23, r18
    1726:	bb 27       	eor	r27, r27
    1728:	f0 0d       	add	r31, r0
    172a:	b1 1d       	adc	r27, r1
    172c:	63 9f       	mul	r22, r19
    172e:	aa 27       	eor	r26, r26
    1730:	f0 0d       	add	r31, r0
    1732:	b1 1d       	adc	r27, r1
    1734:	aa 1f       	adc	r26, r26
    1736:	64 9f       	mul	r22, r20
    1738:	66 27       	eor	r22, r22
    173a:	b0 0d       	add	r27, r0
    173c:	a1 1d       	adc	r26, r1
    173e:	66 1f       	adc	r22, r22
    1740:	82 9f       	mul	r24, r18
    1742:	22 27       	eor	r18, r18
    1744:	b0 0d       	add	r27, r0
    1746:	a1 1d       	adc	r26, r1
    1748:	62 1f       	adc	r22, r18
    174a:	73 9f       	mul	r23, r19
    174c:	b0 0d       	add	r27, r0
    174e:	a1 1d       	adc	r26, r1
    1750:	62 1f       	adc	r22, r18
    1752:	83 9f       	mul	r24, r19
    1754:	a0 0d       	add	r26, r0
    1756:	61 1d       	adc	r22, r1
    1758:	22 1f       	adc	r18, r18
    175a:	74 9f       	mul	r23, r20
    175c:	33 27       	eor	r19, r19
    175e:	a0 0d       	add	r26, r0
    1760:	61 1d       	adc	r22, r1
    1762:	23 1f       	adc	r18, r19
    1764:	84 9f       	mul	r24, r20
    1766:	60 0d       	add	r22, r0
    1768:	21 1d       	adc	r18, r1
    176a:	82 2f       	mov	r24, r18
    176c:	76 2f       	mov	r23, r22
    176e:	6a 2f       	mov	r22, r26
    1770:	11 24       	eor	r1, r1
    1772:	9f 57       	subi	r25, 0x7F	; 127
    1774:	50 40       	sbci	r21, 0x00	; 0
    1776:	9a f0       	brmi	.+38     	; 0x179e <__mulsf3_pse+0x88>
    1778:	f1 f0       	breq	.+60     	; 0x17b6 <__mulsf3_pse+0xa0>
    177a:	88 23       	and	r24, r24
    177c:	4a f0       	brmi	.+18     	; 0x1790 <__mulsf3_pse+0x7a>
    177e:	ee 0f       	add	r30, r30
    1780:	ff 1f       	adc	r31, r31
    1782:	bb 1f       	adc	r27, r27
    1784:	66 1f       	adc	r22, r22
    1786:	77 1f       	adc	r23, r23
    1788:	88 1f       	adc	r24, r24
    178a:	91 50       	subi	r25, 0x01	; 1
    178c:	50 40       	sbci	r21, 0x00	; 0
    178e:	a9 f7       	brne	.-22     	; 0x177a <__mulsf3_pse+0x64>
    1790:	9e 3f       	cpi	r25, 0xFE	; 254
    1792:	51 05       	cpc	r21, r1
    1794:	80 f0       	brcs	.+32     	; 0x17b6 <__mulsf3_pse+0xa0>
    1796:	0c 94 e5 0b 	jmp	0x17ca	; 0x17ca <__fp_inf>
    179a:	0c 94 30 0c 	jmp	0x1860	; 0x1860 <__fp_szero>
    179e:	5f 3f       	cpi	r21, 0xFF	; 255
    17a0:	e4 f3       	brlt	.-8      	; 0x179a <__mulsf3_pse+0x84>
    17a2:	98 3e       	cpi	r25, 0xE8	; 232
    17a4:	d4 f3       	brlt	.-12     	; 0x179a <__mulsf3_pse+0x84>
    17a6:	86 95       	lsr	r24
    17a8:	77 95       	ror	r23
    17aa:	67 95       	ror	r22
    17ac:	b7 95       	ror	r27
    17ae:	f7 95       	ror	r31
    17b0:	e7 95       	ror	r30
    17b2:	9f 5f       	subi	r25, 0xFF	; 255
    17b4:	c1 f7       	brne	.-16     	; 0x17a6 <__mulsf3_pse+0x90>
    17b6:	fe 2b       	or	r31, r30
    17b8:	88 0f       	add	r24, r24
    17ba:	91 1d       	adc	r25, r1
    17bc:	96 95       	lsr	r25
    17be:	87 95       	ror	r24
    17c0:	97 f9       	bld	r25, 7
    17c2:	08 95       	ret

000017c4 <__ctype_isfalse>:
    17c4:	99 27       	eor	r25, r25
    17c6:	88 27       	eor	r24, r24

000017c8 <__ctype_istrue>:
    17c8:	08 95       	ret

000017ca <__fp_inf>:
    17ca:	97 f9       	bld	r25, 7
    17cc:	9f 67       	ori	r25, 0x7F	; 127
    17ce:	80 e8       	ldi	r24, 0x80	; 128
    17d0:	70 e0       	ldi	r23, 0x00	; 0
    17d2:	60 e0       	ldi	r22, 0x00	; 0
    17d4:	08 95       	ret

000017d6 <__fp_nan>:
    17d6:	9f ef       	ldi	r25, 0xFF	; 255
    17d8:	80 ec       	ldi	r24, 0xC0	; 192
    17da:	08 95       	ret

000017dc <__fp_pscA>:
    17dc:	00 24       	eor	r0, r0
    17de:	0a 94       	dec	r0
    17e0:	16 16       	cp	r1, r22
    17e2:	17 06       	cpc	r1, r23
    17e4:	18 06       	cpc	r1, r24
    17e6:	09 06       	cpc	r0, r25
    17e8:	08 95       	ret

000017ea <__fp_pscB>:
    17ea:	00 24       	eor	r0, r0
    17ec:	0a 94       	dec	r0
    17ee:	12 16       	cp	r1, r18
    17f0:	13 06       	cpc	r1, r19
    17f2:	14 06       	cpc	r1, r20
    17f4:	05 06       	cpc	r0, r21
    17f6:	08 95       	ret

000017f8 <__fp_round>:
    17f8:	09 2e       	mov	r0, r25
    17fa:	03 94       	inc	r0
    17fc:	00 0c       	add	r0, r0
    17fe:	11 f4       	brne	.+4      	; 0x1804 <__fp_round+0xc>
    1800:	88 23       	and	r24, r24
    1802:	52 f0       	brmi	.+20     	; 0x1818 <__fp_round+0x20>
    1804:	bb 0f       	add	r27, r27
    1806:	40 f4       	brcc	.+16     	; 0x1818 <__fp_round+0x20>
    1808:	bf 2b       	or	r27, r31
    180a:	11 f4       	brne	.+4      	; 0x1810 <__fp_round+0x18>
    180c:	60 ff       	sbrs	r22, 0
    180e:	04 c0       	rjmp	.+8      	; 0x1818 <__fp_round+0x20>
    1810:	6f 5f       	subi	r22, 0xFF	; 255
    1812:	7f 4f       	sbci	r23, 0xFF	; 255
    1814:	8f 4f       	sbci	r24, 0xFF	; 255
    1816:	9f 4f       	sbci	r25, 0xFF	; 255
    1818:	08 95       	ret

0000181a <__fp_split3>:
    181a:	57 fd       	sbrc	r21, 7
    181c:	90 58       	subi	r25, 0x80	; 128
    181e:	44 0f       	add	r20, r20
    1820:	55 1f       	adc	r21, r21
    1822:	59 f0       	breq	.+22     	; 0x183a <__fp_splitA+0x10>
    1824:	5f 3f       	cpi	r21, 0xFF	; 255
    1826:	71 f0       	breq	.+28     	; 0x1844 <__fp_splitA+0x1a>
    1828:	47 95       	ror	r20

0000182a <__fp_splitA>:
    182a:	88 0f       	add	r24, r24
    182c:	97 fb       	bst	r25, 7
    182e:	99 1f       	adc	r25, r25
    1830:	61 f0       	breq	.+24     	; 0x184a <__fp_splitA+0x20>
    1832:	9f 3f       	cpi	r25, 0xFF	; 255
    1834:	79 f0       	breq	.+30     	; 0x1854 <__fp_splitA+0x2a>
    1836:	87 95       	ror	r24
    1838:	08 95       	ret
    183a:	12 16       	cp	r1, r18
    183c:	13 06       	cpc	r1, r19
    183e:	14 06       	cpc	r1, r20
    1840:	55 1f       	adc	r21, r21
    1842:	f2 cf       	rjmp	.-28     	; 0x1828 <__fp_split3+0xe>
    1844:	46 95       	lsr	r20
    1846:	f1 df       	rcall	.-30     	; 0x182a <__fp_splitA>
    1848:	08 c0       	rjmp	.+16     	; 0x185a <__fp_splitA+0x30>
    184a:	16 16       	cp	r1, r22
    184c:	17 06       	cpc	r1, r23
    184e:	18 06       	cpc	r1, r24
    1850:	99 1f       	adc	r25, r25
    1852:	f1 cf       	rjmp	.-30     	; 0x1836 <__fp_splitA+0xc>
    1854:	86 95       	lsr	r24
    1856:	71 05       	cpc	r23, r1
    1858:	61 05       	cpc	r22, r1
    185a:	08 94       	sec
    185c:	08 95       	ret

0000185e <__fp_zero>:
    185e:	e8 94       	clt

00001860 <__fp_szero>:
    1860:	bb 27       	eor	r27, r27
    1862:	66 27       	eor	r22, r22
    1864:	77 27       	eor	r23, r23
    1866:	cb 01       	movw	r24, r22
    1868:	97 f9       	bld	r25, 7
    186a:	08 95       	ret

0000186c <__muluhisi3>:
    186c:	0e 94 78 0c 	call	0x18f0	; 0x18f0 <__umulhisi3>
    1870:	a5 9f       	mul	r26, r21
    1872:	90 0d       	add	r25, r0
    1874:	b4 9f       	mul	r27, r20
    1876:	90 0d       	add	r25, r0
    1878:	a4 9f       	mul	r26, r20
    187a:	80 0d       	add	r24, r0
    187c:	91 1d       	adc	r25, r1
    187e:	11 24       	eor	r1, r1
    1880:	08 95       	ret

00001882 <__prologue_saves__>:
    1882:	2f 92       	push	r2
    1884:	3f 92       	push	r3
    1886:	4f 92       	push	r4
    1888:	5f 92       	push	r5
    188a:	6f 92       	push	r6
    188c:	7f 92       	push	r7
    188e:	8f 92       	push	r8
    1890:	9f 92       	push	r9
    1892:	af 92       	push	r10
    1894:	bf 92       	push	r11
    1896:	cf 92       	push	r12
    1898:	df 92       	push	r13
    189a:	ef 92       	push	r14
    189c:	ff 92       	push	r15
    189e:	0f 93       	push	r16
    18a0:	1f 93       	push	r17
    18a2:	cf 93       	push	r28
    18a4:	df 93       	push	r29
    18a6:	cd b7       	in	r28, 0x3d	; 61
    18a8:	de b7       	in	r29, 0x3e	; 62
    18aa:	ca 1b       	sub	r28, r26
    18ac:	db 0b       	sbc	r29, r27
    18ae:	0f b6       	in	r0, 0x3f	; 63
    18b0:	f8 94       	cli
    18b2:	de bf       	out	0x3e, r29	; 62
    18b4:	0f be       	out	0x3f, r0	; 63
    18b6:	cd bf       	out	0x3d, r28	; 61
    18b8:	09 94       	ijmp

000018ba <__epilogue_restores__>:
    18ba:	2a 88       	ldd	r2, Y+18	; 0x12
    18bc:	39 88       	ldd	r3, Y+17	; 0x11
    18be:	48 88       	ldd	r4, Y+16	; 0x10
    18c0:	5f 84       	ldd	r5, Y+15	; 0x0f
    18c2:	6e 84       	ldd	r6, Y+14	; 0x0e
    18c4:	7d 84       	ldd	r7, Y+13	; 0x0d
    18c6:	8c 84       	ldd	r8, Y+12	; 0x0c
    18c8:	9b 84       	ldd	r9, Y+11	; 0x0b
    18ca:	aa 84       	ldd	r10, Y+10	; 0x0a
    18cc:	b9 84       	ldd	r11, Y+9	; 0x09
    18ce:	c8 84       	ldd	r12, Y+8	; 0x08
    18d0:	df 80       	ldd	r13, Y+7	; 0x07
    18d2:	ee 80       	ldd	r14, Y+6	; 0x06
    18d4:	fd 80       	ldd	r15, Y+5	; 0x05
    18d6:	0c 81       	ldd	r16, Y+4	; 0x04
    18d8:	1b 81       	ldd	r17, Y+3	; 0x03
    18da:	aa 81       	ldd	r26, Y+2	; 0x02
    18dc:	b9 81       	ldd	r27, Y+1	; 0x01
    18de:	ce 0f       	add	r28, r30
    18e0:	d1 1d       	adc	r29, r1
    18e2:	0f b6       	in	r0, 0x3f	; 63
    18e4:	f8 94       	cli
    18e6:	de bf       	out	0x3e, r29	; 62
    18e8:	0f be       	out	0x3f, r0	; 63
    18ea:	cd bf       	out	0x3d, r28	; 61
    18ec:	ed 01       	movw	r28, r26
    18ee:	08 95       	ret

000018f0 <__umulhisi3>:
    18f0:	a2 9f       	mul	r26, r18
    18f2:	b0 01       	movw	r22, r0
    18f4:	b3 9f       	mul	r27, r19
    18f6:	c0 01       	movw	r24, r0
    18f8:	a3 9f       	mul	r26, r19
    18fa:	70 0d       	add	r23, r0
    18fc:	81 1d       	adc	r24, r1
    18fe:	11 24       	eor	r1, r1
    1900:	91 1d       	adc	r25, r1
    1902:	b2 9f       	mul	r27, r18
    1904:	70 0d       	add	r23, r0
    1906:	81 1d       	adc	r24, r1
    1908:	11 24       	eor	r1, r1
    190a:	91 1d       	adc	r25, r1
    190c:	08 95       	ret

0000190e <__subsf3>:
    190e:	50 58       	subi	r21, 0x80	; 128

00001910 <__addsf3>:
    1910:	bb 27       	eor	r27, r27
    1912:	aa 27       	eor	r26, r26
    1914:	0e 94 9f 0c 	call	0x193e	; 0x193e <__addsf3x>
    1918:	0c 94 fc 0b 	jmp	0x17f8	; 0x17f8 <__fp_round>
    191c:	0e 94 ee 0b 	call	0x17dc	; 0x17dc <__fp_pscA>
    1920:	38 f0       	brcs	.+14     	; 0x1930 <__addsf3+0x20>
    1922:	0e 94 f5 0b 	call	0x17ea	; 0x17ea <__fp_pscB>
    1926:	20 f0       	brcs	.+8      	; 0x1930 <__addsf3+0x20>
    1928:	39 f4       	brne	.+14     	; 0x1938 <__addsf3+0x28>
    192a:	9f 3f       	cpi	r25, 0xFF	; 255
    192c:	19 f4       	brne	.+6      	; 0x1934 <__addsf3+0x24>
    192e:	26 f4       	brtc	.+8      	; 0x1938 <__addsf3+0x28>
    1930:	0c 94 eb 0b 	jmp	0x17d6	; 0x17d6 <__fp_nan>
    1934:	0e f4       	brtc	.+2      	; 0x1938 <__addsf3+0x28>
    1936:	e0 95       	com	r30
    1938:	e7 fb       	bst	r30, 7
    193a:	0c 94 e5 0b 	jmp	0x17ca	; 0x17ca <__fp_inf>

0000193e <__addsf3x>:
    193e:	e9 2f       	mov	r30, r25
    1940:	0e 94 0d 0c 	call	0x181a	; 0x181a <__fp_split3>
    1944:	58 f3       	brcs	.-42     	; 0x191c <__addsf3+0xc>
    1946:	ba 17       	cp	r27, r26
    1948:	62 07       	cpc	r22, r18
    194a:	73 07       	cpc	r23, r19
    194c:	84 07       	cpc	r24, r20
    194e:	95 07       	cpc	r25, r21
    1950:	20 f0       	brcs	.+8      	; 0x195a <__addsf3x+0x1c>
    1952:	79 f4       	brne	.+30     	; 0x1972 <__addsf3x+0x34>
    1954:	a6 f5       	brtc	.+104    	; 0x19be <__addsf3x+0x80>
    1956:	0c 94 2f 0c 	jmp	0x185e	; 0x185e <__fp_zero>
    195a:	0e f4       	brtc	.+2      	; 0x195e <__addsf3x+0x20>
    195c:	e0 95       	com	r30
    195e:	0b 2e       	mov	r0, r27
    1960:	ba 2f       	mov	r27, r26
    1962:	a0 2d       	mov	r26, r0
    1964:	0b 01       	movw	r0, r22
    1966:	b9 01       	movw	r22, r18
    1968:	90 01       	movw	r18, r0
    196a:	0c 01       	movw	r0, r24
    196c:	ca 01       	movw	r24, r20
    196e:	a0 01       	movw	r20, r0
    1970:	11 24       	eor	r1, r1
    1972:	ff 27       	eor	r31, r31
    1974:	59 1b       	sub	r21, r25
    1976:	99 f0       	breq	.+38     	; 0x199e <__addsf3x+0x60>
    1978:	59 3f       	cpi	r21, 0xF9	; 249
    197a:	50 f4       	brcc	.+20     	; 0x1990 <__addsf3x+0x52>
    197c:	50 3e       	cpi	r21, 0xE0	; 224
    197e:	68 f1       	brcs	.+90     	; 0x19da <__addsf3x+0x9c>
    1980:	1a 16       	cp	r1, r26
    1982:	f0 40       	sbci	r31, 0x00	; 0
    1984:	a2 2f       	mov	r26, r18
    1986:	23 2f       	mov	r18, r19
    1988:	34 2f       	mov	r19, r20
    198a:	44 27       	eor	r20, r20
    198c:	58 5f       	subi	r21, 0xF8	; 248
    198e:	f3 cf       	rjmp	.-26     	; 0x1976 <__addsf3x+0x38>
    1990:	46 95       	lsr	r20
    1992:	37 95       	ror	r19
    1994:	27 95       	ror	r18
    1996:	a7 95       	ror	r26
    1998:	f0 40       	sbci	r31, 0x00	; 0
    199a:	53 95       	inc	r21
    199c:	c9 f7       	brne	.-14     	; 0x1990 <__addsf3x+0x52>
    199e:	7e f4       	brtc	.+30     	; 0x19be <__addsf3x+0x80>
    19a0:	1f 16       	cp	r1, r31
    19a2:	ba 0b       	sbc	r27, r26
    19a4:	62 0b       	sbc	r22, r18
    19a6:	73 0b       	sbc	r23, r19
    19a8:	84 0b       	sbc	r24, r20
    19aa:	ba f0       	brmi	.+46     	; 0x19da <__addsf3x+0x9c>
    19ac:	91 50       	subi	r25, 0x01	; 1
    19ae:	a1 f0       	breq	.+40     	; 0x19d8 <__addsf3x+0x9a>
    19b0:	ff 0f       	add	r31, r31
    19b2:	bb 1f       	adc	r27, r27
    19b4:	66 1f       	adc	r22, r22
    19b6:	77 1f       	adc	r23, r23
    19b8:	88 1f       	adc	r24, r24
    19ba:	c2 f7       	brpl	.-16     	; 0x19ac <__addsf3x+0x6e>
    19bc:	0e c0       	rjmp	.+28     	; 0x19da <__addsf3x+0x9c>
    19be:	ba 0f       	add	r27, r26
    19c0:	62 1f       	adc	r22, r18
    19c2:	73 1f       	adc	r23, r19
    19c4:	84 1f       	adc	r24, r20
    19c6:	48 f4       	brcc	.+18     	; 0x19da <__addsf3x+0x9c>
    19c8:	87 95       	ror	r24
    19ca:	77 95       	ror	r23
    19cc:	67 95       	ror	r22
    19ce:	b7 95       	ror	r27
    19d0:	f7 95       	ror	r31
    19d2:	9e 3f       	cpi	r25, 0xFE	; 254
    19d4:	08 f0       	brcs	.+2      	; 0x19d8 <__addsf3x+0x9a>
    19d6:	b0 cf       	rjmp	.-160    	; 0x1938 <__addsf3+0x28>
    19d8:	93 95       	inc	r25
    19da:	88 0f       	add	r24, r24
    19dc:	08 f0       	brcs	.+2      	; 0x19e0 <__addsf3x+0xa2>
    19de:	99 27       	eor	r25, r25
    19e0:	ee 0f       	add	r30, r30
    19e2:	97 95       	ror	r25
    19e4:	87 95       	ror	r24
    19e6:	08 95       	ret

000019e8 <__fixunssfsi>:
    19e8:	0e 94 15 0c 	call	0x182a	; 0x182a <__fp_splitA>
    19ec:	88 f0       	brcs	.+34     	; 0x1a10 <__fixunssfsi+0x28>
    19ee:	9f 57       	subi	r25, 0x7F	; 127
    19f0:	98 f0       	brcs	.+38     	; 0x1a18 <__fixunssfsi+0x30>
    19f2:	b9 2f       	mov	r27, r25
    19f4:	99 27       	eor	r25, r25
    19f6:	b7 51       	subi	r27, 0x17	; 23
    19f8:	b0 f0       	brcs	.+44     	; 0x1a26 <__fixunssfsi+0x3e>
    19fa:	e1 f0       	breq	.+56     	; 0x1a34 <__fixunssfsi+0x4c>
    19fc:	66 0f       	add	r22, r22
    19fe:	77 1f       	adc	r23, r23
    1a00:	88 1f       	adc	r24, r24
    1a02:	99 1f       	adc	r25, r25
    1a04:	1a f0       	brmi	.+6      	; 0x1a0c <__fixunssfsi+0x24>
    1a06:	ba 95       	dec	r27
    1a08:	c9 f7       	brne	.-14     	; 0x19fc <__fixunssfsi+0x14>
    1a0a:	14 c0       	rjmp	.+40     	; 0x1a34 <__fixunssfsi+0x4c>
    1a0c:	b1 30       	cpi	r27, 0x01	; 1
    1a0e:	91 f0       	breq	.+36     	; 0x1a34 <__fixunssfsi+0x4c>
    1a10:	0e 94 2f 0c 	call	0x185e	; 0x185e <__fp_zero>
    1a14:	b1 e0       	ldi	r27, 0x01	; 1
    1a16:	08 95       	ret
    1a18:	0c 94 2f 0c 	jmp	0x185e	; 0x185e <__fp_zero>
    1a1c:	67 2f       	mov	r22, r23
    1a1e:	78 2f       	mov	r23, r24
    1a20:	88 27       	eor	r24, r24
    1a22:	b8 5f       	subi	r27, 0xF8	; 248
    1a24:	39 f0       	breq	.+14     	; 0x1a34 <__fixunssfsi+0x4c>
    1a26:	b9 3f       	cpi	r27, 0xF9	; 249
    1a28:	cc f3       	brlt	.-14     	; 0x1a1c <__fixunssfsi+0x34>
    1a2a:	86 95       	lsr	r24
    1a2c:	77 95       	ror	r23
    1a2e:	67 95       	ror	r22
    1a30:	b3 95       	inc	r27
    1a32:	d9 f7       	brne	.-10     	; 0x1a2a <__fixunssfsi+0x42>
    1a34:	3e f4       	brtc	.+14     	; 0x1a44 <__fixunssfsi+0x5c>
    1a36:	90 95       	com	r25
    1a38:	80 95       	com	r24
    1a3a:	70 95       	com	r23
    1a3c:	61 95       	neg	r22
    1a3e:	7f 4f       	sbci	r23, 0xFF	; 255
    1a40:	8f 4f       	sbci	r24, 0xFF	; 255
    1a42:	9f 4f       	sbci	r25, 0xFF	; 255
    1a44:	08 95       	ret

00001a46 <__gesf2>:
    1a46:	0e 94 51 0b 	call	0x16a2	; 0x16a2 <__fp_cmp>
    1a4a:	08 f4       	brcc	.+2      	; 0x1a4e <__gesf2+0x8>
    1a4c:	8f ef       	ldi	r24, 0xFF	; 255
    1a4e:	08 95       	ret

00001a50 <__unordsf2>:
    1a50:	0e 94 51 0b 	call	0x16a2	; 0x16a2 <__fp_cmp>
    1a54:	88 0b       	sbc	r24, r24
    1a56:	99 0b       	sbc	r25, r25
    1a58:	08 95       	ret

00001a5a <__divmodhi4>:
    1a5a:	97 fb       	bst	r25, 7
    1a5c:	07 2e       	mov	r0, r23
    1a5e:	16 f4       	brtc	.+4      	; 0x1a64 <__divmodhi4+0xa>
    1a60:	00 94       	com	r0
    1a62:	07 d0       	rcall	.+14     	; 0x1a72 <__divmodhi4_neg1>
    1a64:	77 fd       	sbrc	r23, 7
    1a66:	09 d0       	rcall	.+18     	; 0x1a7a <__divmodhi4_neg2>
    1a68:	0e 94 41 0d 	call	0x1a82	; 0x1a82 <__udivmodhi4>
    1a6c:	07 fc       	sbrc	r0, 7
    1a6e:	05 d0       	rcall	.+10     	; 0x1a7a <__divmodhi4_neg2>
    1a70:	3e f4       	brtc	.+14     	; 0x1a80 <__divmodhi4_exit>

00001a72 <__divmodhi4_neg1>:
    1a72:	90 95       	com	r25
    1a74:	81 95       	neg	r24
    1a76:	9f 4f       	sbci	r25, 0xFF	; 255
    1a78:	08 95       	ret

00001a7a <__divmodhi4_neg2>:
    1a7a:	70 95       	com	r23
    1a7c:	61 95       	neg	r22
    1a7e:	7f 4f       	sbci	r23, 0xFF	; 255

00001a80 <__divmodhi4_exit>:
    1a80:	08 95       	ret

00001a82 <__udivmodhi4>:
    1a82:	aa 1b       	sub	r26, r26
    1a84:	bb 1b       	sub	r27, r27
    1a86:	51 e1       	ldi	r21, 0x11	; 17
    1a88:	07 c0       	rjmp	.+14     	; 0x1a98 <__udivmodhi4_ep>

00001a8a <__udivmodhi4_loop>:
    1a8a:	aa 1f       	adc	r26, r26
    1a8c:	bb 1f       	adc	r27, r27
    1a8e:	a6 17       	cp	r26, r22
    1a90:	b7 07       	cpc	r27, r23
    1a92:	10 f0       	brcs	.+4      	; 0x1a98 <__udivmodhi4_ep>
    1a94:	a6 1b       	sub	r26, r22
    1a96:	b7 0b       	sbc	r27, r23

00001a98 <__udivmodhi4_ep>:
    1a98:	88 1f       	adc	r24, r24
    1a9a:	99 1f       	adc	r25, r25
    1a9c:	5a 95       	dec	r21
    1a9e:	a9 f7       	brne	.-22     	; 0x1a8a <__udivmodhi4_loop>
    1aa0:	80 95       	com	r24
    1aa2:	90 95       	com	r25
    1aa4:	bc 01       	movw	r22, r24
    1aa6:	cd 01       	movw	r24, r26
    1aa8:	08 95       	ret

00001aaa <__tablejump2__>:
    1aaa:	ee 0f       	add	r30, r30
    1aac:	ff 1f       	adc	r31, r31
    1aae:	05 90       	lpm	r0, Z+
    1ab0:	f4 91       	lpm	r31, Z
    1ab2:	e0 2d       	mov	r30, r0
    1ab4:	09 94       	ijmp

00001ab6 <_exit>:
    1ab6:	f8 94       	cli

00001ab8 <__stop_program>:
    1ab8:	ff cf       	rjmp	.-2      	; 0x1ab8 <__stop_program>
